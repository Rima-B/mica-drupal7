<?php
/**
 * @file
 * Obiba Mica Graphic file
 */

/**
 * Implements hook_menu().
 */
function obiba_mica_graphic_menu() {
  $items = array();

  $items['admin/config/obiba-mica/obiba_mica_graphic'] = array(
    'title' => 'Statistics Graphic',
    'description' => 'Configure settings for Obiba Mica Graphic.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('obiba_mica_graphic_settings_form'),
    'access arguments' => array('administer obiba mica graphic'),
    'file' => 'obiba_mica_graphic.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 *
 * copy '<modules>/obiba_mica_network/templates/'   files in  your customized
 * theme  '<YOUR_THEME>/templates/' path you can modify default display of
 * listed page templates by rearrange block field for example don't forget to
 * clear the theme registry.
 *
 */
function obiba_mica_graphic_theme($existing, $type, $theme, $path) {
  $path_theme = $path . '/templates';
  $path_views_theme = $path . '/js/app/views';
  return array(
    'obiba_mica_angular_app_geo_charts' => array(
      'template' => 'obiba_mica_angular_app_geo_charts',
      'path' => $path_theme
    ),
    'obiba_mica_angular_app_study_design_charts' => array(
      'template' => 'obiba_mica_angular_app_study_design_charts',
      'path' => $path_theme
    ),
    'obiba_mica_angular_app_biological_samples_charts' => array(
      'template' => 'obiba_mica_angular_app_biological_samples_charts',
      'path' => $path_theme
    ),
    'obiba_mica_angular_app_number_participants_charts' => array(
      'template' => 'obiba_mica_angular_app_number_participants_charts',
      'path' => $path_theme
    ),
    'graphic-main' => array(
      'template' => 'graphic-main',
      'path' => $path_views_theme
    ),
  );
}

/**
 * Default blocks definition
 */
function obiba_mica_graphic_default_block() {
  return array(
    NetworkStatistics::GEO_NBR_STAT => array(
      'info' => t('Geographical distribution for studies'),
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => '<front>',
      'weight' => '-13',
    ),
    NetworkStatistics::METHODS_DESIGNS => array(
      'info' => t('Study design'),
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => '<front>',
      'weight' => '-12',
    ),
    NetworkStatistics::NUMBER_PARTICIPANTS => array(
      'info' => t('Number of Participants'),
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => '<front>',
      'weight' => '-11',
    ),
    NetworkStatistics::BIO_SAMPLES =>
      array(
        'info' => t('Biological Samples'),
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => '<front>',
        'weight' => '-10',
      ),
  );
}

/**
 * Implements hook_block_info().
 */
function obiba_mica_graphic_block_info() {
  return obiba_mica_graphic_default_block();
}

function obiba_mica_graphic_preprocess_block(&$variables) {
  if ($variables['block']->module == 'obiba_mica_graphic') {
    switch ($variables['block']->delta) {
      case NetworkStatistics::GEO_NBR_STAT:
      case NetworkStatistics::METHODS_DESIGNS :
      case NetworkStatistics::NUMBER_PARTICIPANTS :
      case NetworkStatistics::BIO_SAMPLES :
        $block_classes = explode(',', variable_get_value($variables['block']->delta . '_css'));
        foreach ($block_classes as $class) {
          $variables['classes_array'][] = drupal_html_class($class);
        }
    }
  }

}

/**
 * Implements hook_block_view().
 */
function obiba_mica_graphic_block_view($delta = '') {
  $block = array();
  $aggregations_to_show = variable_get_value('graphics_blocks_aggregations');
  $block_delta_parameters = NetworkStatistics::deltaAggregationsMap();
  if ((!empty($aggregations_to_show) && $aggregations_to_show !== 'none')) {
    if ($delta == NetworkStatistics::GEO_NBR_STAT ||
      $delta == NetworkStatistics::METHODS_DESIGNS ||
      $delta == NetworkStatistics::NUMBER_PARTICIPANTS ||
      $delta == NetworkStatistics::BIO_SAMPLES
    ) {
      obiba_mica_app_angular_load_js_resources('obiba_mica_graphic');
    }
    $graphics_bocks = variable_get_value('graphics_blocks');
    $colors_options = obiba_mica_graphic_charts_colors_options_settings();
    $study_design_options =
      !empty($colors_options) ?
        array_merge(array(
          'bars' => 'horizontal',
          'series' => array(
            0 => array('axis' => 'nbrStudies'),
            1 => array('axis' => 'nbrParticipants'),
          ),
          'axes' => array(
            'x' => array(
              'nbrStudies' => array(
                'side' => 'top',
                'label' => t('Number of Studies')
              ),
              'nbrParticipants' => array('label' => t('Number of Participants'))
            )
          ),
          'legend' => array('position' => 'none')
        ), $colors_options) :
        array(
          'bars' => 'horizontal',
          'series' => array(
            0 => array('axis' => 'nbrStudies'),
            1 => array('axis' => 'nbrParticipants'),
          ),
          'axes' => array(
            'x' => array(
              'nbrStudies' => array(
                'side' => 'top',
                'label' => t('Number of Studies')
              ),
              'nbrParticipants' => array('label' => t('Number of Participants'))
            )
          ),
          'legend' => array('position' => 'none')
        );
    $number_participants_options =
      !empty($colors_options) ?
        array_merge(array(
          'legend' => array('position' => 'right'),
          'pieSliceTextStyle' => array('color' => variable_get_value('pie_slice_text_style_color'))
        ), $colors_options) :
        array(
          'legend' => array('position' => 'right'),
          'pieSliceTextStyle' => array('color' => variable_get_value('pie_slice_text_style_color'))
        );
    $bio_samples_options = !empty($colors_options) ?
      array_merge(array(
        'legend' => array('position' => 'right'),
        'pieSliceTextStyle' => array('color' => variable_get_value('pie_slice_text_style_color'))
      ), $colors_options) :
      array(
        'legend' => array('position' => 'right'),
        'pieSliceTextStyle' => array('color' => variable_get_value('pie_slice_text_style_color'))
      );
    switch ($delta) {
      case NetworkStatistics::GEO_NBR_STAT:
        if (!empty($aggregations_to_show) && $aggregations_to_show !== 'none') {
          $display_countries_geo = in_array($block_delta_parameters[$delta], $aggregations_to_show, TRUE);
          if (!empty($graphics_bocks) && $display_countries_geo) {
            $block['content'] = theme('obiba_mica_angular_app_geo_charts');
            drupal_add_js(array(
              'GraphicChartsOptions' =>
                array(
                  'entityType' => 'studies',
                  'entityIds' => implode(',', variable_get_value('graphics_blocks_networks')),
                  'ChartsOptions' => obiba_mica_graphic_charts_options_settings('geoChartOptions',
                    array('graphics.country', 'graphics.nbr-studies'),
                    'graphics.geo-chart-title', array('colorAxis' => $colors_options))
                ),
            ),
              'setting');
          }
        }
        break;

      case NetworkStatistics::METHODS_DESIGNS:
        if (!empty($aggregations_to_show) && $aggregations_to_show !== 'none') {
          $display_design = in_array($block_delta_parameters[NetworkStatistics::METHODS_DESIGNS], $aggregations_to_show, TRUE);
          if (!empty($graphics_bocks) && $display_design) {
            $block['content'] = theme('obiba_mica_angular_app_study_design_charts');
            drupal_add_js(array(
              'GraphicChartsOptions' =>
                array(
                  'entityType' => 'studies',
                  'entityIds' => implode(',', variable_get_value('graphics_blocks_networks')),
                  'ChartsOptions' => obiba_mica_graphic_charts_options_settings('studiesDesigns',
                    array(
                      'graphics.study-design',
                      'graphics.nbr-studies',
                      'graphics.number-participants'
                    ),
                    'graphics.study-design-chart-title', $study_design_options),
                ),
            ),
              'setting');
          }
        }
        break;

      case NetworkStatistics::NUMBER_PARTICIPANTS:
        if (!empty($aggregations_to_show) && $aggregations_to_show !== 'none') {
          $display_nbr_participants = in_array($block_delta_parameters[NetworkStatistics::NUMBER_PARTICIPANTS], $aggregations_to_show, TRUE);
          if (!empty($graphics_bocks) && $display_nbr_participants) {
            $block['content'] = theme('obiba_mica_angular_app_number_participants_charts');
            drupal_add_js(array(
              'GraphicChartsOptions' =>
                array(
                  'entityType' => 'studies',
                  'entityIds' => implode(',', variable_get_value('graphics_blocks_networks')),
                  'ChartsOptions' => obiba_mica_graphic_charts_options_settings('numberParticipants',
                    array(
                      'graphics.number-participants',
                      'graphics.nbr-studies'
                    ),
                    'graphics.number-participants-chart-title', $number_participants_options),
                ),
            ),
              'setting');
          }
        }
        break;

      case NetworkStatistics::BIO_SAMPLES:
        if (!empty($aggregations_to_show) && $aggregations_to_show !== 'none') {
          $display_bio_samples = in_array($block_delta_parameters[NetworkStatistics::BIO_SAMPLES], $aggregations_to_show, TRUE);
          if (!empty($graphics_bocks) && $display_bio_samples) {
            $block['content'] = theme('obiba_mica_angular_app_biological_samples_charts');
            drupal_add_js(array(
              'GraphicChartsOptions' =>
                array(
                  'entityType' => 'studies',
                  'entityIds' => implode(',', variable_get_value('graphics_blocks_networks')),
                  'ChartsOptions' => obiba_mica_graphic_charts_options_settings('biologicalSamples',
                    array('graphics.bio-samples', 'graphics.nbr-studies'),
                    'graphics.bio-samples-chart-title',
                    $bio_samples_options),
                ),
            ),
              'setting');
          }
        }
        break;
    }
    return $block;

  }
}

/**
 * Implements hook_get_js().
 */
function obiba_mica_graphic_get_js($weight_js) {
  $module_path = drupal_get_path('module', 'obiba_mica_graphic');
  $js = file_scan_directory($module_path . '/js/app', '/.*\.js$/', array('key' => 'name'));
  ksort($js);
  foreach ($js as $file_js) {
    drupal_add_js($file_js->uri, array(
      'type' => 'file',
      'scope' => 'footer',
      'weight' => ++$weight_js
    ));
  }
  return $weight_js;
}

/**
 * Implements hook_get_ng_module_to_load().
 */
function obiba_mica_graphic_get_ng_module_to_load() {
  return 'mica.ObibaGraphicCharts';
}

/**
 * Set Pie charts graphics options
 */
function obiba_mica_graphic_charts_options_settings($aggregation_option, $headers_label, $title_chart, $custom_options = NULL) {
  $default_options = array(
    'options' => array(),
  );
  $options = array(
    $aggregation_option => array(
      'header' => $headers_label,
      'title' => $title_chart,
    ),
  );
  if (!empty($custom_options)) {
    $options_result = array_merge_recursive($default_options['options'], $custom_options);
    $options[$aggregation_option]['options'] = $options_result;
  }
  return $options;
}

/**
 * Get default colors options
 */
function obiba_mica_graphic_charts_colors_options_settings() {
  $options_colors = array();
  $colors = variable_get_value('graphics_nbr_colors');
  if (empty($colors) || $colors == 'none') {
    return NULL;
  }
  $colors_setting = array_filter($colors, function ($color) {
    return !empty($color);
  });
  foreach ($colors_setting as $nbr => $colors) {
    $options_colors[] = variable_get_value('color_' . $nbr);
  }
  if (!empty($options_colors)) {
    return array('colors' => $options_colors);
  }
}

/**
 * Make a chart from taxonomy coverage.
 *
 * @param $query
 *
 * @return array
 */
function obiba_mica_graphic_search_query_charts($query, $default_dto_search = NULL, $chart_title = NULL, $entity_id = NULL) {
  $search_resources = new ObibaSearchResources();
  $coverages = $search_resources->taxonomiesCoverageRql($query, 'variables', 'coverage', FALSE);
  $taxonomy_charts = array();
  if (!empty($coverages->taxonomies)) {
    $taxonomies_filter = obiba_mica_commons_taxonomies_filter_array('mica_taxonomy_figures');
    foreach ($taxonomies_filter as $allowed_taxonomy => $taxonomy) {
      foreach ($coverages->taxonomies as $taxonomy_coverage) {
        $labels = array();
        $data = array();
        $links = array();
        $link = array();

        if ($taxonomy_coverage->taxonomy->name === $allowed_taxonomy) {
          foreach ($taxonomy_coverage->vocabularies as $key_vocabulary => $vocabulary_coverage) {
            if (!empty($vocabulary_coverage->count)) {
              $labels[$key_vocabulary] = obiba_mica_commons_get_localized_field($vocabulary_coverage->vocabulary, 'titles');

              $terms = array();
              foreach ($vocabulary_coverage->terms as $key_term => $term) {
                array_push($terms, $term->term->name);
                if (!empty($vocabulary_coverage->buckets)) {
                  if (!empty($term->buckets)) {
                    foreach ($term->buckets as $key_bucket => $bucket) {
                      if (!empty($data[$bucket->value])) {
                        $data[$bucket->value][$key_vocabulary] += $bucket->hits;
                      }
                      else {
                        $data[$bucket->value][$key_vocabulary] = $bucket->hits;
                      }

                      $link[$bucket->value][$key_vocabulary] = MicaClient::chartQueryBuilders(
                        NULL,
                        $bucket,
                        $taxonomy_coverage->taxonomy->name,
                        $vocabulary_coverage->vocabulary->name,
                        $terms,
                        $entity_id
                      );
                    }
                  }
                }
              }

              if (empty($vocabulary_coverage->buckets)) {
                $data[t('Variables')][] = $vocabulary_coverage->count;
                if (!empty($terms)) {
                  $link[t('Variables')][] = MicaClient::chartQueryBuilders(
                    $query,
                    NULL,
                    $taxonomy_coverage->taxonomy->name,
                    $vocabulary_coverage->vocabulary->name,
                    $terms,
                    $entity_id
                  );
                }
              }
            }
          }

          //transform string index key to integer index key
          foreach ($link as $key) {
            $links[] = $key;
          }

          if (!empty($data)) {
            $parser_data['data'] = $data;
            $parser_data['links'] = !empty($links) ? $links : NULL;
            $title = t('Number of variables');
            if (!empty($default_dto_search['group-by'])) {
              $group_by_names = array(
                'studyIds' => t('study'),
                'dceIds' => t('data collection event'),
                'datasetId' => t('dataset'),
              );
              $title = $title . ' (' . t('group by') . ' ' . $group_by_names[$default_dto_search['group-by']] . ')';
            }
            if (!empty($chart_title)) {
              $title = $chart_title;
            }
            $taxonomy_charts[] = array(
              'taxonomy' => $taxonomy_coverage->taxonomy,
              'chart' => obiba_mica_graphic_stacked_column_chart($labels, $parser_data, $title, NULL, 450, 'none')
            );
          }
        }
      }
    }
  }

  return $taxonomy_charts;
}

function obiba_mica_graphic_stacked_column_chart($labels, $data, $title, $width = 250, $height = 175, $legend_position = 'none') {
  $chart_param = variable_get_value('charts_default_settings');
  $chart_width = $width;
  if (empty($width) && count($labels) < 10) {
    $chart_width = count($labels) * 20 + $height;
  }
  $raw_options['vAxis']['logScale'] = FALSE;
  $raw_options['vAxis']['minorGridlines']['count'] = 0;

  // make sure links keys are a sequence
  $raw_options['links'] = array();
  foreach ($data['links'] as $k => $links) {
    $raw_options['links'][$k] = array();
    foreach ($links as $link) {
      $raw_options['links'][$k][] = $link;
    }
  }

  $chart = array(
    '#type' => 'chart',
    '#chart_type' => 'column',
    '#colors' => current(obiba_mica_graphic_charts_colors_options_settings()),
    '#stacking' => TRUE,
    '#width' => $chart_width,
    '#height' => $height,
    '#title' => empty($title) ? ' ' : $title,
    '#legend_position' => $legend_position,
    '#legend' => $legend_position != 'none',
    '#chart_library' => $chart_param['library'],
    '#raw_options' => $raw_options,
  );
  foreach ($data['data'] as $key => $datum) {
    // make sure datum keys are a sequence
    $datum2 = array();
    foreach ($datum as $d) {
      $datum2[] = $d;
    }
    $chart[$key] = array(
      '#type' => 'chart_data',
      '#title' => ' ' . $key, // google chart has a bug when title is a number
      '#data' => $datum2
    );
  }

  // make sure label keys are a sequence
  $labels2 = array();
  foreach ($labels as $label) {
    $labels2[] = $label;
  }
  $chart['xaxis'] = array(
    '#type' => 'chart_xaxis',
    '#labels' => $labels2,
    //'#labels_rotation' => 90,
  );
  return $chart;
}


function obiba_mica_graphic_pie_chart($labels, $data, $title, $width = 250, $height = 175, $legend_position = 'none', $raw_options = array()) {
  $chart_param = variable_get_value('charts_default_settings');
  $raw_options = array_merge($raw_options, array('pieSliceTextStyle' => array('color' => variable_get_value('pie_slice_text_style_color'))));
  $chart = array(
    '#type' => 'chart',
    '#chart_type' => 'pie',
    '#colors' => current(obiba_mica_graphic_charts_colors_options_settings()),
    '#width' => $width,
    '#height' => $height,
    '#title' => empty($title) ? ' ' : $title,
    '#chart_library' => $chart_param['library'],
    '#legend_position' => $legend_position,
    '#data_labels' => TRUE,
    '#legend' => $legend_position != 'none',
    '#tooltips' => TRUE,
    '#raw_options' => $raw_options
  );
  $chart['pie_data'] = array(
    '#type' => 'chart_data',
    '#title' => empty($title) ? ' ' : $title,
    '#labels' => $labels,
    '#data' => $data
  );

  return $chart;
}
