<?php
/*
 * @file code for obiba_mica_search module
 * */
$path_module_protobuf = drupal_get_path('module', 'obiba_mica_study');
include_once($path_module_protobuf . '/obiba_mica_study-page-list.inc');

include_once('includes/obiba_mica_search_resource.inc');
include_once('includes/obiba_mica_search_resource_facet_conf.inc');
include_once('obiba_mica_search_charts.php');

/*********Temporary*********/
$path_module_networks = drupal_get_path('module', 'obiba_mica_network');
include_once($path_module_networks . '/obiba_mica_network-page-list.inc');

function obiba_mica_search_menu() {
  $items = array();

  $items['mica/search'] = array(
    'title' => 'Search',
    'description' => 'Search',
    'page callback' => 'obiba_mica_search_variable_page_search',
    'menu_name' => 'main-menu',
    'weight' => 10,
    'access callback' => TRUE
  );

  $items['mica/coverage'] = array(
    'title' => 'Classifications Coverage',
    'description' => 'Classifications Coverage',
    'page callback' => 'obiba_mica_search_coverage_page',
    'access callback' => TRUE
  );

  $items['mica/coverage/download'] = array(
    'title' => 'Classifications Coverage',
    'description' => 'Classifications Coverage',
    'page callback' => 'obiba_mica_search_coverage_download',
    'access callback' => TRUE
  );

  $items['mica/studies_search/%'] = array(
    'title' => 'Studies Search',
    'description' => 'Search published studies',
    'page callback' => 'obiba_mica_search_study_page_search',
    'access callback' => TRUE,
    'page arguments' => array(2)
  );

  $items['bucket/autocomplete/%'] = array(
    'page callback' => 'obiba_mica_search_autocomplete_ajax_response',
    'file' => 'includes/obiba_mica_search_resource_facet_conf.inc',
    'access callback' => TRUE,
    'page arguments' => array(2),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implements hook_theme().
 *
 * copy '<modules>/obiba_mica_dataset/templates/'   files in  your customized theme  '<YOUR_THEME>/templates/' path
 * you can modify default display of listed page templates by rearrange block field for example
 * don't forget to clear the theme registry.
 *
 */

function obiba_mica_search_theme($existing, $type, $theme, $path) {
  $path_theme = $path . '/templates';
  return array(
    'block__obiba_mica_search' => array(
      'variables' => array('block' => array()),
      'template' => 'block--obiba_mica_search',
      'path' => $path_theme
    ),
    'obiba_mica_search_block_search' => array(
      'template' => 'obiba_mica_search_block_search',
      'path' => $path_theme
    ),
    'obiba_mica_search_search' => array(
      'template' => 'obiba_mica_search_search',
      'path' => $path_theme
    ),
    'obiba_mica_search_coverage' => array(
      'template' => 'obiba_mica_search_coverage',
      'path' => $path_theme
    ),
    'obiba_mica_search_vocabulary_coverage' => array(
      'template' => 'obiba_mica_search_vocabulary_coverage',
      'path' => $path_theme
    ),
    'obiba_mica_search_checkbox_term' => array(
      'template' => 'obiba_mica_search_checkbox_term',
      'path' => $path_theme
    ),
    'obiba_mica_search_input_text_range' => array(
      'template' => 'obiba_mica_search_input_text_range',
      'path' => $path_theme
    ),
    'obiba_mica_search_tab_block' => array(
      'template' => 'obiba_mica_search_tab_block',
      'path' => $path_theme
    ),
    'obiba_mica_search_charts' => array(
      'template' => 'obiba_mica_search_charts',
      'path' => $path_theme
    ),
    'obiba_mica_search_vocabulary_charts' => array(
      'template' => 'obiba_mica_search_vocabulary_charts',
      'path' => $path_theme
    ),
    'obiba_mica_search_fixed_sidebar' => array(
      'template' => 'obiba_mica_search_fixed_sidebar',
      'path' => $path_theme
    ),
    'obiba_mica_search_cloned_block' => array(
      'template' => 'obiba_mica_search_cloned_block',
      'path' => $path_theme
    ),
  );
}

function obiba_mica_commons_create_full_text_query_form($arg) {
  $args = func_get_args();
  $type = $args[2];
  if (empty($type)) {
    throw new InvalidArgumentException("drupal_get_form() form type is missing from argument list.");
    return;
  }

  $form = array();
  $form['#id'] = 'facet-search-query-form-' . $type;
  $form['#method'] = 'get';
  $form['#prefix'] = '<div class="inline-form">';
  $form['#suffix'] = '</div>';

  $input_id = "$type:matches:facet-search-query";
  $form['facet-search-query' . $type] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#description' => 'Filter by',
    '#default_value' => !empty($_GET['search-query']) ? check_plain($_GET['search-query']) : NULL,
    '#prefix' => '<div class="lg-width"><div class="input-group"><span class="input-group-addon"><i class="glyphicon glyphicon-filter"></i></span>',
    '#suffix' => "</div></div>",
    '#attributes' => array('id' => $input_id, 'name' => $input_id)
  );

  return $form;
}

/**
 * Implements hook_block_info().
 */
function obiba_mica_search_block_info() {
  $blocks['facet-search'] = array(
    'info' => t('Facet search'),
    'title' => t('Facet search'),
    'status' => 1,
    'region' => 'facets',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '*mica/search
*mica/coverage',
    'weight' => 10,
    'custom' => 1,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function obiba_mica_search_block_view($delta = '') {
  switch ($delta) {
    case 'facet-search':
      $output = theme('obiba_mica_search_tab_block', array(
        'obiba_mica_variable' =>
          _obiba_mica_search_get_facets_block_by_dto_type('facet_conf_variable', 'variables'),
        'obiba_mica_study' =>
          _obiba_mica_search_get_facets_block_by_dto_type('facet_conf_study', 'studies')
      ));
      $block['subject'] = t('Facet search');
      $block['content'] = $output;
      return $block;
  }
}

function _obiba_mica_search_get_facets_block_by_dto_type($dto_type, $type) {
  $rendred_blocks = "";
  $facets = obiba_mica_search_resource_return_facets($dto_type);
  //dpm(drupal_json_encode($facets));
  if (!empty($facets)) {
    foreach ($facets as $key_facet => $facet) {
      $has_terms = MicaClient::has_entity_by_id_aggregation($facet['aggs']);
      if (!empty($has_terms) || ($facet['aggs'] == 'datasetId') || ($facet['aggs'] == 'networkId')) {
        $rendred_blocks .= theme('obiba_mica_search_cloned_block', array(
          'content' => obiba_mica_search_precess_block_theme('search-' . $facet['aggs'], $type),
          'title' => $facet['title'],
          'block_html_id' => $key_facet,
        ));
      }
    }
  }
  if (!empty($rendred_blocks)) {
    return $rendred_blocks;
  }
  else {
    return NULL;
  }
}

function obiba_mica_search_load_libs() {
  $module_path_commons = drupal_get_path('module', 'obiba_mica_commons');
  drupal_add_js($module_path_commons . '/js/obiba-mica-commons-got-top.js');
  $module_path_ = drupal_get_path('module', 'obiba_mica_search');
  drupal_add_js($module_path_ . '/js/obiba-mica-search-common.js');
  drupal_add_js($module_path_ . '/js/obiba-mica-search-coverage.js');
  drupal_add_js($module_path_ . '/js/obiba-mica-search-query-serializer.js');
  drupal_add_js($module_path_ . '/js/obiba-mica-search_collapse_deal.js');
  drupal_add_js($module_path_ . '/js/obiba-mica-search_tab_deal.js');
  drupal_add_js($module_path_ . '/js/obiba-mica-search-href.js');
  drupal_add_js(array(
    'UrlErrorsQuery' => !empty($_SESSION['errorsQuery']) ? $_SESSION['errorsQuery'] : NULL,
    'ErrorMessage' => t('An error occurred when parsing url query, Please make sure to use facet search tools
       to perform your search. <br>This page will be refeshed in 3s ')
  ), 'setting');
  $facet_conf["studies"] = obiba_mica_search_resource_return_facets('facet_conf_study');
  $facet_conf["variables"] = obiba_mica_search_resource_return_facets('facet_conf_variable');
  $facet_conf["general"] = //
    array( //
      'matches' => t('Matches'), //
      'match' => t('Match'), //
      'is' => t('be'), //
      'and' => t('and'), //
      'or' => t('or'), //
      'variables' => t('Variables'), //
      'datasets' => t('Datasets'), //
      'studies' => t('Studies'), //
      'networks' => t('Networks') //
    );
  drupal_add_js($module_path_ . '/js/obiba-mica-search-query-renderer.js');
  drupal_add_js(array(
    'obiba_mica_facet' => array('facet_conf' => $facet_conf),
    'terms_dictionary' => obiba_mica_search_create_terms_dictionary()
  ), 'setting');

}

function obiba_mica_search_create_terms_dictionary() {
  $dictionary = array();
  if (!empty($_SESSION['variables'])) {
    foreach ($_SESSION['variables']['aggregations'] as $aggregation) {
      if (empty($aggregation->aggregation)) {
        continue;
      }
      $type = "studyIds" !== $aggregation->aggregation ? "variables" : "studies";

      if (!empty($aggregation->{'obiba.mica.TermsAggregationResultDto.terms'})) {
        foreach ($aggregation->{'obiba.mica.TermsAggregationResultDto.terms'} as $term) {
          $dictionary[sprintf("$type:%s:%s", $aggregation->aggregation, $term->key)] = $term->title;
        }
      }
    }
  }

  if (!empty($_SESSION['studies'])) {
    foreach ($_SESSION['studies']['aggregations'] as $aggregation) {
      if (empty($aggregation->aggregation)) {
        continue;
      }
      $type = "networkId" !== $aggregation->aggregation ? "studies" : "networks";
      if (!empty($aggregation->{'obiba.mica.TermsAggregationResultDto.terms'})) {
        foreach ($aggregation->{'obiba.mica.TermsAggregationResultDto.terms'} as $term) {
          $dictionary[sprintf("$type:%s:%s", $aggregation->aggregation, $term->key)] = $term->title;
        }
      }
    }
  }

  return $dictionary;
}

/*
 * filter the url parameter and search for tab parameter to return correct resource
 * @return tab parameter if exist
 * */
function obiba_mica_search_get_url_tab_parameter() {
  $url_parm = explode('?', request_uri());
  $type = 'variables';
  if (!empty($url_parm[1])) {
    parse_str($url_parm[1], $parts);
    if (!empty($parts['type'])) {
      $type = $parts['type'];
    }
  }
  return $type;
}

function obiba_mica_get_hits_entities_variable($entity) {
  return array(
    'study_totalHits' => !empty($entity['study_totalHits']) ? $entity['study_totalHits'] : NULL,
    'study_totalCount' => !empty($entity['study_totalHits']) ? $entity['study_totalHits'] : NULL,
    'variable_totalHits' => !empty($entity['variable_totalHits']) ? $entity['variable_totalHits'] : NULL,
    'variable_totalCount' => !empty($entity['variable_totalCount']) ? $entity['variable_totalCount'] : NULL,
    'dataset_totalHits' => !empty($entity['dataset_totalHits']) ? $entity['dataset_totalHits'] : NULL,
    'dataset_totalCount' => !empty($entity['dataset_totalCount']) ? $entity['dataset_totalCount'] : NULL,
    'network_totalHits' => !empty($entity['network_totalHits']) ? $entity['network_totalHits'] : NULL,
    'network_totalCount' => !empty($entity['network_totalCount']) ? $entity['network_totalCount'] : NULL
  );
}

function obiba_mica_search_variable_page_search() {
  //drupal_set_title(t('@request variables search', array('@request' => ucwords($request))));

  $studies = NULL;
  $study_charts = NULL;
  $variables = NULL;
  $networks = NULL;
  $datasets = NULL;
  $variable_charts = NULL;
  $join_query_response = NULL;
  $search_resources = new MicaSearchResource();

  $resource = obiba_mica_search_get_url_tab_parameter();
  if (!empty($resource)) {
    switch ($resource) {
      case  'networks':
        $join_query_response = $search_resources->search_networks();
        $networks = $join_query_response->getNetworkResponseWrapper();
        extract(obiba_mica_get_hits_entities_variable($join_query_response->getCountStats()), EXTR_OVERWRITE);
        break;
      case  'datasets':
        $join_query_response = $search_resources->search_datasets();
        $datasets = $join_query_response->getDatasetResponseWrapper();
        extract(obiba_mica_get_hits_entities_variable($join_query_response->getCountStats()), EXTR_OVERWRITE);
        break;
      case  'studies':
        $join_query_response = $search_resources->search_studies();
        $studies = $join_query_response->getStudyResponseWrapper();
        extract(obiba_mica_get_hits_entities_variable($join_query_response->getCountStats()), EXTR_OVERWRITE);
        break;
      case  'variables' :
        $join_query_response = $search_resources->search_variables();
        $variables = $join_query_response->getVariableResponseWrapper();
        extract(obiba_mica_get_hits_entities_variable($join_query_response->getCountStats()), EXTR_OVERWRITE);
        break;
    }

  }
  else {
    $join_query_response = $search_resources->search_variables();
    $variables = $join_query_response->getVariableResponseWrapper();
  }

  $url_parm = explode('?', request_uri());
  if (!empty($url_parm[1])) {
    parse_str($url_parm[1], $parts);
  }

  $output = theme('obiba_mica_search_search',
    array(
      'noval' => '',
      'query' => empty($parts['query']) ? '' : $parts['query'],
      'variables_result' => array('data' => obiba_mica_search_variables_table($variables)),
      'variable_totalHits' => !empty($variable_totalHits) ? $variable_totalHits : NULL,
      'variable_totalCount' => !empty($variable_totalCount) ? $variable_totalCount : NULL,
      'variable_search_form' => drupal_get_form('obiba_mica_commons_create_full_text_query_form', 'variables'),
      'datasets' => array('data' => obiba_mica_search_datasets_table($datasets)),
      'dataset_totalHits' => !empty($dataset_totalHits) ? $dataset_totalHits : NULL,
      'dataset_totalCount' => !empty($dataset_totalCount) ? $dataset_totalCount : NULL,
      'dataset_search_form' => drupal_get_form('obiba_mica_commons_create_full_text_query_form', 'datasets'),
      'studies' => array('data' => obiba_mica_search_studies_table($studies)),
      'study_totalHits' => !empty($study_totalHits) ? $study_totalHits : NULL,
      'study_totalCount' => !empty($study_totalCount) ? $study_totalCount : NULL,
      'study_search_form' => drupal_get_form('obiba_mica_commons_create_full_text_query_form', 'studies'),
      'networks' => array('data' => obiba_mica_search_networks_table($networks)),
      'network_totalHits' => !empty($network_totalHits) ? $network_totalHits : NULL,
      'network_totalCount' => !empty($network_totalCount) ? $network_totalCount : NULL,
      'network_search_form' => drupal_get_form('obiba_mica_commons_create_full_text_query_form', 'networks')
    ));

  obiba_mica_search_load_libs();
  return $output;
}

Function obiba_mica_search_get_buckets($vocabulary_coverage, $all_bucket) {
  if (!empty($vocabulary_coverage->buckets)) {
    foreach ($vocabulary_coverage->buckets as $bucket) {
      if ((string) $bucket->value == (string) $all_bucket->value) {
        return $bucket;
      }
    }
  }
  return FALSE;
}

Function obiba_mica_search_get_terms($terms_buckets, $all_bucket) {
  if (!empty($terms_buckets->buckets)) {
    foreach ($terms_buckets->buckets as $bucket) {
      if ((string) $bucket->value == (string) $all_bucket->value) {
        return $bucket;
      }
    }
  }
  return FALSE;
}

function obiba_mica_search_coverage_page() {
  $module_path_commons = drupal_get_path('module', 'obiba_mica_commons');
  drupal_add_js($module_path_commons . '/js/obiba-mica-commons-fixed-sidebar.js');
  drupal_add_js(array(
    'template' => 'obiba_mica_search_fixed_sidebar'
  ), 'setting');
  obiba_mica_search_load_libs();
  $url_param = explode('?', request_uri());
  if (!empty($url_param[1])) {
    parse_str($url_param[1], $parts);
  }
  $bucket_names = array();
  $vocabulary_coverage_outputs = array();
  $vocabulary_coverage_output = array();
  $search_resources = new MicaSearchResource();
  $coverages = $search_resources->taxonomies_coverage(NULL, array('group-by' => 'studyIds'));
  if (!empty($coverages->taxonomies)) {
    foreach ($coverages->taxonomies as $taxonomy_coverage) {
      $formatted_vocabulary_coverage = new stdClass();
      foreach ($taxonomy_coverage->vocabularies as $vocabulary_coverage) {
        if (!empty($taxonomy_coverage->buckets)) {
          //  dpm($taxonomy_coverage->buckets);
          foreach ($taxonomy_coverage->buckets as $key_bucket => $all_bucket) {
            $formatted_bucket = new stdClass();
            $formatted_bucket->field = $all_bucket->field;
            $formatted_bucket->value = $all_bucket->value;
            $formatted_bucket->hits = 0;
            $formatted_bucket->count = 0;

            $bucket_returned = obiba_mica_search_get_buckets($vocabulary_coverage, $all_bucket);
            if (!empty($bucket_returned)) {
              $formatted_vocabulary_coverage->buckets[$key_bucket] = $bucket_returned;
              $bucket_names[$key_bucket] = $bucket_returned->value;
            }
            else {
              $formatted_vocabulary_coverage->buckets[$key_bucket] = $formatted_bucket;
              $bucket_names[$key_bucket] = $formatted_bucket->value;
            }

            foreach ($vocabulary_coverage->terms as $key_term => $term) {
              $returned_term_bucket = obiba_mica_search_get_terms($vocabulary_coverage, $all_bucket);
              if (!empty($returned_term_bucket)) {
                $formatted_vocabulary_coverage->terms[$key_term]->buckets[$key_bucket] = $returned_term_bucket;
              }
              else {
                $formatted_vocabulary_coverage->terms[$key_term]->buckets[$key_bucket] = $formatted_bucket;
              }
            }

          }
        }
        unset($vocabulary_coverage->buckets);
        $vocabulary_coverage_merged = (object) array_merge((array) $formatted_vocabulary_coverage, (array) $vocabulary_coverage);
        $vocabulary_coverage_output[$vocabulary_coverage_merged->vocabulary->name] = theme('obiba_mica_search_vocabulary_coverage', array(
          'taxonomy' => $taxonomy_coverage->taxonomy,
          'vocabulary_coverage' => $vocabulary_coverage_merged,
          'chart' => theme('obiba_mica_search_vocabulary_charts', array(
            'vocabulary_coverage' => $vocabulary_coverage_merged,
            'chart' => obiba_mica_search_vocabulary_chart($vocabulary_coverage_merged),
          )),
          'bucket_names' => $bucket_names,
          'vocabulary_attribute' => 'attributes-' . $taxonomy_coverage->taxonomy->name . '__' . $vocabulary_coverage_merged->vocabulary->name . '-und'
        ));
      }
      $vocabulary_coverage_outputs[$taxonomy_coverage->taxonomy->name] = $vocabulary_coverage_output;
    }
  }
  unset($_SESSION['fixed_menu']);
  $_SESSION['fixed_menu'] = array('coverages' => $coverages);
  $output = theme('obiba_mica_search_coverage', array(
    'coverages' => $coverages,
    'vocabulary_coverage_outputs' => $vocabulary_coverage_outputs,
    'query' => !empty($parts['query']) ? $parts['query'] : NULL,
    'group_by' => !empty($parts['group-by']) ? $parts['group-by'] : 'studyIds',
  ));
  return $output;
}

function obiba_mica_search_coverage_download() {
  obiba_mica_search_load_libs();
  $search_resources = new MicaSearchResource();
  $response = $search_resources->download_taxonomies_coverage(NULL, array('group-by' => 'studyIds'));
  if (!empty($response)) {
    $headers = $search_resources->getLastResponseHeaders();
    drupal_add_http_header('Content-Type', $headers['Content-Type'][0] . '; utf-8');
    drupal_add_http_header('Content-Disposition', $headers['Content-Disposition'][0]);
    ob_clean();
    print $response->body;
    exit;
  }
}

function obiba_mica_search_study_page_search() {
  $output['title'] = t('Study search page');
  obiba_mica_search_load_libs();
  $search_resources = new MicaSearchResource();
  $search_response = $search_resources->search_studies();
  $study_charts = theme('obiba_mica_search_charts', array(
    'charts' => obiba_mica_search_get_facets_chart('obiba_mica_study', $_SESSION['studies']['aggregations'])
  ));
  return $study_charts . obiba_mica_search_studies_table($search_response);
}

function obiba_mica_search_variables_table($variables) {
  $rows = array();
  $total_hits = 0;
  $has_study = FALSE;

  if (!empty($variables)) {
    $total_hits = $variables->getTotalHits();
    $summaries = $variables->getSummaries();
    foreach ($summaries as $variable) {
      $name = $variable->name;
      $dataset_name = !empty($variable->datasetAcronym) ?
        obiba_mica_commons_get_localized_field($variable, 'datasetAcronym') :
        $variable->datasetId;
      $dataset_type = $variable->variableType == 'Study' ? 'study-dataset' : 'harmonization-dataset';
      $study_name = !empty($variable->studyAcronym) ? obiba_mica_commons_get_localized_field($variable, 'studyAcronym') : NULL;
      $variable_label = !empty($variable->variableLabel) ? obiba_mica_commons_get_localized_field($variable, 'variableLabel') : NULL;

      $row = array(
        l($name, 'mica/variable/' . $variable->id),
        !empty($variable_label) ? $variable_label : '-',
        l($dataset_name, 'mica/' . $dataset_type . '/' . $variable->datasetId),
      );

      if (!empty($variable->studyId)) {
        $row[] = l($study_name, 'mica/study/' . $variable->studyId);
        $has_study = TRUE;
      }
      $rows[] = $row;
    }
  }

  // this is just a temporary trick to hide an empty column
  // study count with search link is expected instead
  if ($has_study) {
    for ($i = 0; $i < count($rows); $i++) {
      if (count($rows[$i]) == 3) {
        $rows[$i][] = '-';
      }
    }
  }

  $headers = array(
    t('Variable'),
    t('Label'),
    t('Dataset'),
  );
  if ($has_study) {
    $headers[] = t('Study');
  }
  pager_default_initialize($total_hits, MicaSearchResource::SIZE_RESPONSE);
  return '<div class="scroll-content-tab">' . theme(
    'table',
    array(
      'header' => $headers,
      'rows' => $rows, // empty($chunks) ? array() : $chunks[$current_page],
      'empty' => t('No variable found')

    )
  ) . '</div>' . theme('pager');
}

function obiba_mica_search_studies_table($studies) {
  $rows = array();
  $total_hits = 0;

  if (!empty($studies)) {
    $total_hits = $studies->getTotalHits();
    $summaries = $studies->getSummaries();
    $rows[] = array(
      '',
      '',
      '',
      t('Quest'),
      t('PM'),
      t('Bio'),
      t('Others'),
      '',
      '',
      t('Study'),
      t('Harmonization'),
      ''
    );

    foreach ($summaries as $study) {
      $query_studies_param =
        MicaClient::add_parameter_dto_query_link(array(
          'variables' => array('terms' => array('studyIds' => $study->id))
        ));

      $query_studies_param_harmo =
        MicaClient::add_parameter_dto_query_link(array(
          'variables' =>
            array('terms' => array('studyIds' => $study->id, 'variableType' => 'dataschema'))
        ));

      $query_studies_param_dataset =
        MicaClient::add_parameter_dto_query_link(array(
          'variables' =>
            array('terms' => array('studyIds' => $study->id, 'variableType' => 'study'))
        ));

      $number_variables = $study->{'obiba.mica.CountStatsDto.studyCountStats'}->variables;
      //MicaClient::obiba_mica_search_get_item_count('studies', 'variables', $study->id);

      $number_tables_study_harmo = $study->{'obiba.mica.CountStatsDto.studyCountStats'}->harmonizationDatasets;
      //    MicaClient::obiba_mica_search_get_item_count('studies', 'studyTables-studyId', $study->id);
      $number_table_study_study = $study->{'obiba.mica.CountStatsDto.studyCountStats'}->studyDatasets;
      // MicaClient::obiba_mica_search_get_item_count('studies', 'studyTable-studyId', $study->id);

      $number_networks_study = $study->{'obiba.mica.CountStatsDto.studyCountStats'}->networks;
      // MicaClient::obiba_mica_search_get_item_count('studies', 'networks-studyId', $study->id);

      $name = obiba_mica_commons_get_localized_field($study, 'name');

      $rows[] = array(
        /*acronym*/
        l(obiba_mica_commons_get_localized_field($study, 'acronym'), 'mica/study/' . $study->id),
        /*name*/
        $name,
        /*Type*/
        implode(', ', t($study->designs)),
        /*Quest-DSA*/
        array(
          'data' => !empty($study->dataSources) && obiba_mica_search_has_datasource($study->dataSources, 'questionnaires') ?
              '<i class="glyphicon glyphicon-ok"></i>' : '--',
          'class' => 'checkebox'
        ),
        /*PM-DSA*/
        array(
          'data' => !empty($study->dataSources) && obiba_mica_search_has_datasource($study->dataSources, 'physical_measures') ?
              '<i class="glyphicon glyphicon-ok"></i>' : '--',
          'class' => 'checkebox'
        ),
        /*Bio-DSA*/
        array(
          'data' => !empty($study->dataSources) && obiba_mica_search_has_datasource($study->dataSources, 'biological_samples') ?
              '<i class="glyphicon glyphicon-ok"></i>' : '--',
          'class' => 'checkebox'
        ),
        /*Others-DSA*/
        array(
          'data' => !empty($study->dataSources) && obiba_mica_search_has_datasource($study->dataSources, 'others') ?
              '<i class="glyphicon glyphicon-ok"></i>' : '--',
          'class' => 'checkebox'
        ),
        /*Participants*/
        isset($study->targetNumber->noLimit) ? t('No Limit') :
          isset($study->targetNumber->number) ? $study->targetNumber->number : NULL,
        /*Networks*/
        !empty($number_networks_study) ?
          l($number_networks_study, 'mica/search', array(
            'query' => array(
              'type' => 'networks',
              'query' => $query_studies_param
            )
          )) : '-',
        /*Study-dataset*/
        !empty($number_table_study_study) ? l($number_table_study_study, 'mica/search', array(
          'query' => array(
            'type' => 'datasets',
            'query' => $query_studies_param_dataset
          )
        )) : '-',
        /*Harmonization-dataset*/
        !empty($number_tables_study_harmo) ? l($number_tables_study_harmo, 'mica/search', array(
          'query' => array(
            'type' => 'datasets',
            'query' => $query_studies_param_harmo
          )
        )) : '-',
        /*Variables*/
        !empty($number_variables) ?
          l($number_variables, 'mica/search', array(
            'query' => array(
              'type' => 'variables',
              'query' => $query_studies_param
            )
          ))
          : '-',
      );
    }
  }
// t('Quest'), t('PM'), t('Bio'),t('Others'),
  $headers = array(
    array('data' => t('Acronym'), 'class' => 'col-sm-1'),
    array('data' => t('Name'), 'class' => 'col-sm-3'),
    array('data' => t('Type'), 'class' => 'col-sm-1'),
    array('data' => t('Data Sources Available'), 'colspan' => 4, 'class' => 'col-sm-3 checkebox'),
    array('data' => t('Participants'), 'class' => 'col-sm-1'),
    array('data' => t('Networks'), 'class' => 'col-sm-1'),
    array('data' => t('Datasets'), 'colspan' => 2, 'class' => 'col-sm-2'),
    array('data' => t('Variables'), 'class' => 'col-sm-1'),
  );

  pager_default_initialize($total_hits, MicaClient::SIZE_RESPONSE);
  return '<div class="scroll-content-tab">' . theme(
    'table',
    array(
      'header' => $headers,
      'rows' => $rows,
      'empty' => t('No study found'),
      'attributes' => array(
        'id' => 'studies-results',
        'class' => array('table-bordered', 'table-hover', 'table-condensed')
      )
    )
  ) . '</div>' . theme('pager');
}

function obiba_mica_search_has_datasource($data_sources, $value) {
  foreach ($data_sources as $value_term) {
    if ($value_term == $value) {
      return TRUE;
    }
  }
  return FALSE;
}

function obiba_mica_search_datasets_table($datasets) {
  $rows = array();
  $total_hits = 0;

  if (!empty($datasets)) {
    $total_hits = $datasets->getTotalHits();
    $summaries = $datasets->getSummaries();
    foreach ($summaries as $dataset) {
      $query_datasets_param =
        MicaClient::add_parameter_dto_query_link(array('variables' => array('terms' => array('datasetId' => $dataset->id))));

      $count_networks = !empty($dataset->{'obiba.mica.CountStatsDto.datasetCountStats'}->networks) ?
        $dataset->{'obiba.mica.CountStatsDto.datasetCountStats'}->networks : NULL;

      $count_studies = !empty($dataset->{'obiba.mica.CountStatsDto.datasetCountStats'}->studies) ?
        $dataset->{'obiba.mica.CountStatsDto.datasetCountStats'}->studies : NULL;

      $count_variables = !empty($dataset->{'obiba.mica.CountStatsDto.datasetCountStats'}->variables) ?
        $dataset->{'obiba.mica.CountStatsDto.datasetCountStats'}->variables : NULL;

      if (!empty($dataset->{'obiba.mica.StudyDatasetDto.type'})) {
        $type_dataset_link = 'study-dataset';
        $type_dataset = t('Study');
      }
      else {
        $type_dataset_link = 'harmonization-dataset';
        $type_dataset = t('Harmonization');
      }
      $name = obiba_mica_commons_get_localized_field($dataset, 'name');
      $rows[] = array(
        l(obiba_mica_commons_get_localized_field($dataset, 'acronym'), 'mica/' . $type_dataset_link . '/' . $dataset->id),
        $name,
        $type_dataset,
        !empty($count_networks) ?
          l($count_networks, 'mica/search', array(
            'query' => array(
              'type' => 'networks',
              'query' => $query_datasets_param
            )
          ))
          : '--',
        !empty($count_studies) ?
          l($count_studies, 'mica/search', array(
            'query' => array(
              'type' => 'studies',
              'query' => $query_datasets_param
            )
          ))
          : '--',
        !empty($count_variables) ?
          l($count_variables, 'mica/search', array(
            'query' => array(
              'type' => 'variables',
              'query' => $query_datasets_param
            )
          ))
          : '--'

      );
    }
  }

  $headers = array(
    t('Acronym'),
    t('Name'),
    t('Type'),
    t('Networks'),
    t('Studies'),
    t('Variables'),
  );

  pager_default_initialize($total_hits, MicaClient::SIZE_RESPONSE);
  return '<div class="scroll-content-tab">' . theme(
    'table',
    array(
      'header' => $headers,
      'rows' => $rows,
      'empty' => t('No dataset found'),
    )
  ) . '</div>' . theme('pager');
}

function obiba_mica_search_networks_table($networks) {
  $rows = array();
  $total_hits = 0;

  if (!empty($networks)) {
    $total_hits = $networks->getTotalHits();
    $rows[] = array(
      '',
      '',
      '',
      t('Study'),
      t('Harmonization'),
      ''
    );

    $summaries = $networks->getSummaries();
    foreach ($summaries as $network) {
      $param_network_query =
        MicaClient::add_parameter_dto_query_link(array('networks' => array('terms' => array('id' => $network->id))));

      $param_network_query_harmo_dataset =
        MicaClient::add_parameter_dto_query_link(
          array(
            'networks' => array('terms' => array('id' => $network->id)),
            'variables' => array('terms' => array('variableType' => 'dataschema'))
          )
        );

      $param_network_query_study_dataset =
        MicaClient::add_parameter_dto_query_link(
          array(
            'networks' => array('terms' => array('id' => $network->id)),
            'variables' => array('terms' => array('variableType' => 'study'))
          )
        );

      $studies_count = !empty($network->{'obiba.mica.CountStatsDto.networkCountStats'}->studies) ?
        $network->{'obiba.mica.CountStatsDto.networkCountStats'}->studies : NULL;

      $datasets_study_count = !empty($network->{'obiba.mica.CountStatsDto.networkCountStats'}->studyDatasets) ?
        $network->{'obiba.mica.CountStatsDto.networkCountStats'}->studyDatasets : NULL;

      $datasets_harmonized_count = !empty($network->{'obiba.mica.CountStatsDto.networkCountStats'}->harmonizationDatasets) ?
        $network->{'obiba.mica.CountStatsDto.networkCountStats'}->harmonizationDatasets : NULL;

      $variables_count = !empty($network->{'obiba.mica.CountStatsDto.networkCountStats'}->variables) ?
        $network->{'obiba.mica.CountStatsDto.networkCountStats'}->variables : NULL;

      $name = obiba_mica_commons_get_localized_field($network, 'name');

      $rows[] = array(
        l(obiba_mica_commons_get_localized_field($network, 'acronym'), 'mica/network/' . $network->id),
        $name,
        l($studies_count, 'mica/search', array(
          'query' => array(
            'type' => 'studies',
            'query' => $param_network_query
          )
        )),
        l($datasets_study_count, 'mica/search', array(
          'query' => array(
            'type' => 'datasets',
            'query' => $param_network_query_study_dataset
          )
        )),
        l($datasets_harmonized_count, 'mica/search', array(
          'query' => array(
            'type' => 'datasets',
            'query' => $param_network_query_harmo_dataset
          )
        )),
        l($variables_count, 'mica/search', array(
          'query' => array(
            'type' => 'variables',
            'query' => $param_network_query
          )
        )),
      );
    }
  }

  $headers = array(
    /*Short Name*/
    t('Acronym'),
    /*Name*/
    t('Name'),
    /*Studies cout*/
    t('Studies'),
    /*Datasets counts*/
    array('data' => t('Datasets'), 'colspan' => 2),
    /*Variables Counts*/
    t('Variables'),
  );

  pager_default_initialize($total_hits, MicaClient::SIZE_RESPONSE);

  return '<div class="scroll-content-tab">' . theme(
    'table',
    array(
      'header' => $headers,
      'rows' => $rows,
      'empty' => t('No network found'),
      'attributes' => array(
        'id' => 'networks-results',
        'class' => array('table-bordered', 'table-hover', 'table-condensed')
      )
    )
  ) . '</div>' . theme('pager');
}

function obiba_mica_search_get_studies_count_from_dto($dto) {
  $studies = array();
  $count_study = 0;
  $study_ids = array();
  foreach ($dto->studyIds as $study_id) {
    $studies['count'] = ++$count_study;
    $study_ids[] = $study_id;
  }
  $studies['ids'] = $study_ids;
  return $studies;
}

function obiba_mica_search_get_variables_count_from_studies_dto($studies) {
  $varcount = 0;
  foreach ($_SESSION['variables']['aggregations'] as $aggregation) {
    if ($aggregation->aggregation == 'studyIds') {
      foreach ($aggregation->{'obiba.mica.TermsAggregationResultDto.terms'} as $study) {
        if (in_array($study->key, $studies)) {
          $varcount += $study->count;
        }
      }
      return $varcount;
    }
  }
}


