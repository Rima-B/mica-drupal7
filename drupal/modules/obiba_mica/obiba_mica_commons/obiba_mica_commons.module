<?php

/*
 * @file  code for obiba_mica_commons module
 * */

/**
 * Converts a string to a slug, for use in URLs or CSS classes. This function properly replaces
 *  letters with accents with their non-accented counterparts.
 *
 * @param string The string to convert.
 * @return string The slug.
 */
$path_module_protobuf = drupal_get_path('module', 'obiba_protobuf');
$path_module_protos = drupal_get_path('module', 'obiba_mica_model');

include_once($path_module_protobuf . '/protobuf/Protobuf.php');
use \DrSlump\Protobuf;

Protobuf::autoload();

const HEADER_BINARY = 'application/x-protobuf';
const HEADER_JSON = 'application/json';
include_once($path_module_protos . '/protos/Mica.php');

function obiba_mica_commons_menu() {
  $items = array();

  $items['mica/get_fixed_sidebar/%'] = array(
    'page callback' => 'obiba_mica_commons_fixed_sidebar',
    'access callback' => TRUE,
    'page arguments' => array(2)
  );

  $items['download/%/%/%'] = array(
    //'title' => t('AutoComp Menu'),
    'page callback' => 'obiba_mica_commons_download_attachment',
    'access callback' => TRUE,
    'page arguments' => array(1, 2, 3)
  );

  $items['mica/datatable-international'] = array(
    'title' => 'Dataset',
    'page callback' => 'obiba_mica_commons_datatables_multi_Lang',
    'access callback' => TRUE,
    'page arguments' => array(),
  );

  return $items;
}

function obiba_mica_commons_fixed_sidebar($template) {
  $output['fixed_menu'] = theme($template, $_SESSION['fixed_menu']);
  drupal_json_output($output);
}

function obiba_mica_commons_download_attachment($entity_type, $entity_id, $file_resource_id) {
  if (!empty($file_resource_id)) {
    $mica_url = (isset($mica_url) ? $mica_url : variable_get_value('mica_url')) . '/ws';
    $url = $mica_url . "/" . $entity_type . "/" . $entity_id . "/file/" . $file_resource_id . "/_download";
    $resource_data = drupal_http_request($url);
    $response_code = floor($resource_data->code / 100) * 100;
    if ($response_code != 400 && $response_code != 500 && !empty($resource_data)) {
      drupal_add_http_header('Content-Type', $resource_data->headers['content-type']);
      drupal_add_http_header('Content-Disposition', $resource_data->headers['content-disposition']);
      ob_clean();
      print $resource_data->data;
      exit;
    }
    else {
      // dpm(drupal_get_destination());
      drupal_set_message(t('An error occurred downloading file, server response code : @code, Server message: "@message"',
          array(
            '@code' => $response_code,
            '@message' => $resource_data->error
          )
        ),
        'error');
      drupal_goto('mica/' . $entity_type . '/' . $entity_id);

    }
  }
}

/**
 * @param $std The object with localized fields
 * @param $field The localized field
 * @param $lang
 * @return the localized value for this field, with this priority order: $lang, $language->language, 'en' or the first other locale found
 */
function obiba_mica_commons_get_localized_field($std, $field, $lang = NULL) {
  global $language;
  if (empty($lang)) {
    $lang = $language->language;
  }
  //  $lang='fr';//dpm($std);
  $value = NULL;
  if (!empty($std->{$field})) {
    foreach ($std->{$field} as $field_value) {
      if (!empty($lang) && $lang == $field_value->lang) {
        return $field_value->value;
      }
      elseif ($field_value->lang == 'en') {
        $value = $field_value->value;
      }
      else {
        $value = $field_value->value;
      }
    }
  }
  elseif (is_array($std) && !empty($std[$field])) {
    foreach ($std[$field] as $field_value) {
      if (!empty($lang) && $lang == $field_value['lang']) {
        return $field_value['value'];
      }
      elseif ($field_value['lang'] == 'en') {
        $value = $field_value['value'];
      }
      else {
        $value = $field_value['value'];
      }
    }
  }
  return $value;
}

/*
 * Multi language Datatables  support
 * */
function obiba_mica_commons_datatables_multi_Lang() {
  $_lang_translation = array(
    "sEmptyTable" => t("No data available in table"),
    "sInfo" => t("Showing @start to @end of @total entries", array(
      "@start" => "_START_",
      "@end" => "_END_",
      "@total" => "_TOTAL_"
    )),
    "sInfoEmpty" => t("Showing 0 to 0 of 0 entries"),
    "sInfoFiltered" => t("(filtered from @max total entries)", array("@max" => "_MAX_")),
    "sInfoPostFix" => t(""),
    "sInfoThousands" => t(","),
    "sLengthMenu" => t("Show @menu entries", array("@menu" => "_MENU_")),
    "sLoadingRecords" => t("Loading..."),
    "sProcessing" => t("Processing..."),
    "sSearch" => t("Search:"),
    "sZeroRecords" => t("No matching records found"),
    "oPaginate" => array(
      "sFirst" => t("First"),
      "sLast" => t("Last"),
      "sNext" => t("Next"),
      "sPrevious" => t("Previous")
    ),
    "oAria" => array(
      "sSortAscending" => t(": activate to sort column ascending"),
      "sSortDescending" => t(": activate to sort column descending")
    )
  );

  return drupal_json_output($_lang_translation);
}

/*
 * Add external js dataTables
 * */
function obiba_mica_commons_datatables_external_source() {
  drupal_add_js('http://cdn.datatables.net/1.10.4/js/jquery.dataTables.min.js', 'external');
  drupal_add_js('http://cdn.datatables.net/fixedcolumns/3.0.2/js/dataTables.fixedColumns.min.js', 'external');
  drupal_add_js('http://cdn.datatables.net/plug-ins/9dcbecd42ad/integration/bootstrap/3/dataTables.bootstrap.js', 'external');
  drupal_add_css('http://cdn.datatables.net/plug-ins/9dcbecd42ad/integration/bootstrap/3/dataTables.bootstrap.css', 'external');
}

/**
 * Change a keyword into a readable string.
 * @param $str a string
 * @return null|string
 */
function obiba_mica_commons_clean_string($str) {
  if (empty($str)) {
    return $str;
  }
  if (is_array($str)) {
    $nstr = array();
    foreach ($str as $k => $v) {
      $nstr[$k] = obiba_mica_commons_clean_string($v);
    }
    return $nstr;
  }

  return ucwords(str_replace('_', ' ', $str));
}

/**
 * @param $std The object with localized fields
 * @param $field The localized field
 * @param $lang
 * @return the localized value for this field, with this priority order: $lang, $language->language, 'en' or the first other locale found
 */

function obiba_mica_commons_get_localized_dtos_field($std, $field, $lang = NULL) {
  $value = array();
  foreach ($std->{$field} as $items) {
    $value[] = obiba_mica_commons_get_localized_field($items, 'localizedStrings');
  }
  return $value;
}

/**
 * @param $limit
 *
 * @return text 'no limit' fin $limit is Null
 */
function obiba_mica_commons_get_if_no_limit($limit) {
  if (!empty($limit)) {
    return t('No limit');
  }
}

/**
 * @param $iso_countries
 * @return CamelCase Country name
 *
 */
function obiba_mica_commons_countries($iso_countries) {
  ob_start();
  obiba_mica_commons_iterate_field($iso_countries, 'countries_country_lookup', 'iso3', 'name');
  return ob_get_clean();
}

/**
 *
 * @param $fields
 * @param null $callback
 * @param null $parameters
 * @param null $method
 */
function obiba_mica_commons_iterate_field($fields, $callback = NULL, $parameters = NULL, $method = NULL) {
  $i = 0;
  $total_item = count($fields);
  foreach ($fields as $field) {
    if (!empty($callback)) {
      if (empty($parameters)) {
        print   call_user_func($callback, $field);
      }
      elseif (empty($method)) {
        print   call_user_func_array($callback, array($field, $parameters));
      }
      else {
        try {
          $user_func = call_user_func_array($callback, array($field, $parameters));
          if (!empty($user_func->{$method})) {
            print $user_func->{$method};
          }
          else {
            print $field;
          }
        }
        catch (Exception $e) {
          dpm($e->getMessage());
          dpm($callback);
          dpm($field);
          dpm($parameters);
          dpm($method);
          print $field;
        }
      }

    }
    else {
      print t(obiba_mica_commons_clean_string($field));
    }
    if ($i + 1 < $total_item) {
      print ', ';
    }
    $i++;
  }

}

function _obiba_mica_commons_normalize_rows(&$dce_rows) {
  foreach ($dce_rows as &$dce_row) {
    $dce_row['data']['start'] = obiba_mica_commons_format_year($dce_row['data']['start_year'], $dce_row['data']['start_month']);
    $dce_row['data']['end'] = obiba_mica_commons_format_year($dce_row['data']['end_year'], $dce_row['data']['end_month']);
    unset($dce_row['data']['start_year']);
    unset($dce_row['data']['start_month']);
    unset($dce_row['data']['end_year']);
    unset($dce_row['data']['end_month']);
    unset($dce_row['data']['created']);
  }
}

function obiba_mica_commons_get_month_name($month) {
  global $language;
  return format_date(mktime(0, 0, 0, $month, 1, 2013), 'custom', 'F', NULL, $language->language);
}

function obiba_mica_commons_convert_to_month($year, $month) {
  return $year * 12 + $month;
}

function obiba_mica_commons_format_year($year, $month) {
  if (empty($year)) {
    return '';
  }
  return empty($month) ? "$year" : "$year (" . obiba_mica_commons_get_month_name($month) . ")";
}

function obiba_mica_commons_add_page($title, $body_html, $alias = NULL, $format = 'full_html') {

  $page_wrapper = entity_property_values_create_entity(
    'node',
    array(
      'type' => 'page',
      'title' => $title,
      'title_field' => $title,
      'body' => array(
        'value' => $body_html,
        'format' => $format,
      ),
      'language' => LANGUAGE_NONE,
      'comment' => COMMENT_NODE_CLOSED,
    )
  )->save();

  if (isset($alias)) {
    $path = array('alias' => $alias);
    $path['source'] = 'node/' . $page_wrapper->getIdentifier();
    $path['language'] = LANGUAGE_NONE;
    path_save($path);
  }

  return $page_wrapper->value();
}

/**
 * Check if current theme is based on Twitter Bootstrap
 */
function obiba_mica_commons_is_bootstrap_based_theme() {
  // cannot use module_invoke_all() because hook are invoked only for modules
  $current_theme = obiba_mica_commons_get_current_theme();
  $function = $current_theme . '_bootstrap_based_theme';
  if (function_exists($function)) {
    $result = call_user_func_array($function, array());
    return !empty($result) && is_array($result) && isset($result[$current_theme]) ? $result[$current_theme] : FALSE;
  }
  return FALSE;
}

function obiba_mica_commons_get_current_theme() {
  global $custom_theme, $theme, $user;

  if (!empty($user->theme)) {
    return $user->theme;
  }
  if (!empty($custom_theme)) {
    return $custom_theme;
  }
  return $theme ? $theme : 'obiba_bootstrap';
}

function obiba_mica_commons_create_search_form($context, $no_acronym = TRUE, $no_name = TRUE) {
  global $language;
  if ($no_name) {
    $sort_name = 'name.' . $language->language;
  }
  if ($no_acronym) {
    $sort_acronym = 'acronym.' . $language->language;
    $options = array_merge(array($sort_name => t('Name'), $sort_acronym => t('Acronym')), $context['options']);
  }
  else {
    $options = array_merge(array($sort_name => t('Name')), $context['options']);
  }

  $default_sort = empty($_GET['search-sort'])
    ? empty($context['default_sort']) ? NULL : $context['default_sort']
    : $_GET['search-sort'];

  $default_sort_order = empty($_GET['search-sort-order'])
    ? empty($context['default_sort_order']) ? NULL : $context['default_sort_order']
    : $_GET['search-sort-order'];

  $default_nbr_result = empty($_GET['search-nbr-result'])
    ? empty($context['search_nbr_result']) ? NULL : $context['search_nbr_result']
    : $_GET['search-nbr-result'];

  $form = array();
  $form['#id'] = 'obiba-mica-search-form';
  $form['#method'] = 'get';
  if (isset($_GET['search-sort']) || isset($_GET['search-sort-order']) || isset($_GET['search-query'])) {
    $form['button'] = array(
      '#type' => 'button',
      '#value' => '<i class="flaticon-undo9"></i>',
      '#attributes' => array(
        'class' => array('btn-warning'),
        'id' => array('refresh-button')
      ),
    );
  }
  $form['search-nbr-result'] = array(
    '#type' => 'select',
    '#title' => '',
    '#description' => 'Number of displayed entries',
    '#options' => array(
      '' => '-',
      10 => '10',
      25 => '25',
      50 => '50',
      100 => '100'
    ),
    '#default_value' => $default_nbr_result,
  );

  $form['search-sort'] = array(
    '#type' => 'select',
    '#title' => '',
    '#description' => t('Sort by'),
    '#options' => $options,
    '#default_value' => $default_sort,
  );

  $form['search-sort-order'] = array(
    '#type' => 'select',
    '#title' => '',
    '#description' => 'Sort order',
    '#options' => array(
      'asc' => t('Asc.'),
      'desc' => t('Desc.'),
    ),
    '#default_value' => $default_sort_order,
  );

  $form['search-query'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#size' => 15,
    '#description' => 'Filter by',
    '#default_value' => !empty($_GET['search-query']) ? check_plain($_GET['search-query']) : NULL,
    '#prefix' => '<i class="input-group-addon glyphicon glyphicon-search"></i>',
  );

  return $form;
}

function obiba_mica_commons_safe_expose_server_url($entity_id, $file_resource, $entity_type) {
  $attached_resource = & drupal_static(__FUNCTION__);
  if (!isset($attached_resource)) {
    $cached_attached_resources = cache_get('images-cache-' . $entity_id . '-' . $file_resource->id);

    if (!empty($cached_attached_resources)) {
      return $cached_attached_resources->data;
    }
    else {
      if (!empty($file_resource)) {
        $mica_url = (isset($mica_url) ? $mica_url : variable_get_value('mica_url')) . '/ws';
        $url = $mica_url . "/" . $entity_type . "/" . $entity_id . "/file/"
          . $file_resource->id . "/_download";
        $resource_data = drupal_http_request($url);
        $response_code = floor($resource_data->code / 100) * 100;
        if ($response_code != 400 && $response_code != 500 && !empty($resource_data)) {
          $extension_file = _obiba_mica_commons_get_file_extension($file_resource);
          $file = file_unmanaged_save_data($resource_data->data, 'public://tmp' . $file_resource->id . '.' . $extension_file, FILE_EXISTS_REPLACE);
          $exposed_url = file_create_url($file);
          //Time out in second
          $time_out = variable_get_value('image_cache_time_out') * 60;
          cache_set('images-cache-' . $entity_id . '-' . $file_resource->id, $exposed_url, 'cache', time() + $time_out);
          return $exposed_url;
        }
        else {
          return NULL;
        }
      }
    }
  }
  return NULL;
}

function _obiba_mica_commons_get_file_extension($file_resource) {
  $file_array = explode('.', $file_resource->fileName);
  $extension_file = count($file_array);

  return $file_array[$extension_file - 1];
}

/**
 * Transform a markdown text into html and wrap it in a div with 'markdown' class.
 * @param $text
 * @return string
 */
function obiba_mica_commons_markdown($text) {
  if (!empty($text)) {
    module_load_include('php', 'obiba_mica_commons', 'includes/Parsedown');
    $formatter = new Parsedown();
    return '<div class="markdown">' . $formatter->text($text) . '</div>';
  }
  return $text;
}