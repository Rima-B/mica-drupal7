<?php
$path_module_protobuf = drupal_get_path('module', 'mica_client_study');
include_once($path_module_protobuf . '/mica_client_study-page-list.inc');

include_once('includes/mica_client_facet_search_resource.inc');
include_once('includes/mica_client_facet_search_resource_facet_conf.inc');
include_once('mica_client_facet_search_charts.php');

/*********Temporary*********/
$path_module_networks = drupal_get_path('module', 'mica_client_network');
include_once($path_module_networks . '/mica_client_network-page-list.inc');

function mica_client_facet_search_menu() {
  $items = array();

  $items['mica/search'] = array(
    'title' => 'Search',
    'description' => t('Search'),
    'page callback' => 'mica_client_facet_search_variable_page_search',
    'access callback' => TRUE
  );

  $items['mica/studies_search/%'] = array(
    'title' => t('Studies Search'),
    'description' => t('Search published studies'),
    'page callback' => 'mica_client_facet_search_study_page_search',
    'access callback' => TRUE,
    'page arguments' => array(2)
  );

  return $items;
}

function mica_client_facet_search_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $links = array();
  switch ($root_path) {
    case 'mica/datasets/study-datasets':
      $links['mica/search'] = array(
        '#weight' => 30,
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('Search Variables'),
          'href' => 'mica/search',
          'localized_options' => array(
            'query' => array(
              'type' => 'variables',
              'query' => '{"variables":{"terms":{"variableType":["study"]}}}'
            ),
            'attributes' => array(
              'class' => 'highlight',
            ),
          ),
        ),
      );

      break;
    case 'mica/datasets/harmonization-datasets':
      $links['mica/search'] = array(

        '#weight' => 30,
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('Search Variables'),
          'href' => 'mica/search',
          'localized_options' => array(
            'query' => array(
              'type' => 'variables',
              'query' => '{"variables":{"terms":{"variableType":["dataschema"]}}}'
            ),
            'attributes' => array(
              'class' => 'highlight',
            ),
          ),
        ),
      );

      break;
    case 'mica/datasets':
      $links['mica/search'] = array(

        '#weight' => 30,
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('Search Variables'),
          'href' => 'mica/search',
          'localized_options' => array(
            'query' => array(
              'type' => 'variables',
            ),
            'attributes' => array(
              'class' => 'highlight',
            ),
          ),
        ),
      );

      break;
    case 'mica/studies':
      $links['mica/studies_search'] = array(
        '#weight' => 30,
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('Search Studies'),
          'href' => 'mica/search',
          'localized_options' => array(
            'query' => array(
              'type' => 'studies',
            ),
            'attributes' => array(
              'class' => 'highlight',
            ),
          ),
        ),
      );

      break;
  }

  $data['actions']['output'] = array_merge($data['actions']['output'], $links);
}


/**
 * Implements hook_theme().
 *
 * copy '<modules>/mica_client_dataset/templates/'   files in  your customized theme  '<YOUR_THEME>/templates/' path
 * you can modify default display of listed page templates by rearrange block field for example
 * don't forget to clear the theme registry.
 *
 */

function mica_client_facet_search_theme($existing, $type, $theme, $path) {
  $path_theme = $path . '/templates';
  return array(
    'block__mica_client_facet_search' => array(
      'variables' => array('block' => array()),
      'template' => 'block--mica_client_facet_search',
      'path' => $path_theme
    ),
    'mica_client_facet_search_block_search' => array(
      'template' => 'mica_client_facet_search_block_search',
      'path' => $path_theme
    ),
    'mica_client_facet_search_variable-search' => array(
      'template' => 'mica_client_facet_search_variable-search',
      'path' => $path_theme
    ),
    'mica_client_facet_search_checkbox_term' => array(
      'template' => 'mica_client_facet_search_checkbox_term',
      'path' => $path_theme
    ),
    'mica_client_facet_search_input_text_range' => array(
      'template' => 'mica_client_facet_search_input_text_range',
      'path' => $path_theme
    ),
    'mica_client_facet_search_tab_block' => array(
      'template' => 'mica_client_facet_search_tab_block',
      'path' => $path_theme
    ),
    'mica_client_facet_search_charts' => array(
      'template' => 'mica_client_facet_search_charts',
      'path' => $path_theme
    )
  );
}

/**
 * Implements hook_block_info().
 */
function mica_client_facet_search_block_info() {
  $i = 0 - count(mica_client_facet_search_resource_return_facets('facet_conf_variable'));
  foreach (mica_client_facet_search_resource_return_facets('facet_conf_variable') as $key_facet => $facet) {
    $blocks['search-' . $key_facet] = mica_client_facet_search_block_info_construct($facet['title'], $i);
    --$i;
  }

  $j = 0 - count(mica_client_facet_search_resource_return_facets('facet_conf_study'));
  foreach (mica_client_facet_search_resource_return_facets('facet_conf_study') as $key_facet => $facet) {
    $blocks['search-' . $key_facet] = mica_client_facet_search_block_info_construct($facet['title'], $j);
    --$j;
  }

  $blocks['facet-search-variables'] = array(
    'info' => t('Facet search variables'),
    'title' => t('Facet search variables'),
    'status' => 1,
    'region' => 'facets',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '*mica/search',
    'weight' => --$i,
    'custom' => 1,
  );

  $blocks['facet-search-studies'] = array(
    'info' => t('Facet search studies'),
    'title' => t('Facet search studies'),
    'status' => 1,
    'region' => 'facets',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '*mica/search',
    'weight' => --$i,
    'custom' => 1,
  );
  $blocks['facet-studies'] = array(
    'info' => t('Facet search studies'),
    'title' => t('Facet search studies'),
    'status' => 1,
    'region' => 'facets',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '*mica/studies_search/*',
    'weight' => --$i,
    'custom' => 1,
  );

  $blocks['facet-search'] = array(
    'info' => t('Facet search'),
    'title' => t('Facet search'),
    'status' => 1,
    'region' => 'facets',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '*mica/search',
    'weight' => --$i,
    'custom' => 1,
  );
  return $blocks;
}

function mica_client_facet_search_block_info_construct($facet_title, $facet_weight) {
  $facet_title_array = explode('-', $facet_title);
  return array(
    'info' => t('Facet search @title', array('@title' => drupal_strtolower(drupal_strtolower($facet_title_array[0] . ' ' . $facet_title_array[1])))),
    'title' => t('@title', array('@title' => $facet_title_array[1])),
    'status' => 0,
//    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '',
    'weight' => $facet_weight,
    'custom' => 1,
  );
}


/**
 * Implements hook_block_view().
 */
function mica_client_facet_search_block_view($delta = '') {
  switch ($delta) {
    case 'facet-search':
      if (!empty($_SESSION['variables']['request']) && $_SESSION['variables']['request'] == 'dataset') {
        $output = _mica_client_facet_search_get_facets_block_by_dto_type('facet_conf_variable', 'variables', 'child');
      }
      else {
        $output = theme('mica_client_facet_search_tab_block', array(
          'mica_client_variable' =>
            _mica_client_facet_search_get_facets_block_by_dto_type('facet_conf_variable', 'variables', 'variable'),
          'mica_client_study' =>
            _mica_client_facet_search_get_facets_block_by_dto_type('facet_conf_study', 'studies', 'study')
        ));
      }
      $block['subject'] = t('Facet search variables');
      $block['content'] = $output;
      return $block;
    case 'facet-studies' :
      $output = _mica_client_facet_search_get_facets_block_by_dto_type('facet_conf_study', 'studies', 'study');
      $block['subject'] = t('Facet search studies');
      $block['content'] = $output;
      return $block;
    default:
      foreach (mica_client_facet_search_resource_return_facets() as $key_facet => $facet) {
        if (user_access('access content') && $delta == 'search-' . $key_facet) { //good idea to check user perms here
          $facet_title_array = explode('-', $facet['title']);
          $block['subject'] = $facet_title_array;
          $block['content'] = $block['content'] = mica_client_facet_search_precess_block_theme('search-' . $facet['aggs'], 'studies');
          return $block;
        }
      }
  }
}

function _mica_client_facet_search_get_facets_block_by_dto_type($dto_type, $type) {
  $blockto_render = array();
  $facets = mica_client_facet_search_resource_return_facets($dto_type);
  //dpm(drupal_json_encode($facets));
  foreach ($facets as $key_facet => $facet) {
    $blockto_render[$dto_type . '_search-' . $key_facet] =
      block_load('mica_client_facet_search', 'search-' . $key_facet);
    $facet_title_array = explode('-', $facet['title']);
    $blockto_render[$dto_type . '_search-' . $key_facet]->subject = $facet_title_array[1];
    $blockto_render[$dto_type . '_search-' . $key_facet]->content['#markup'] = mica_client_facet_search_precess_block_theme('search-' . $facet['aggs'], $type);

  }

  $block_output = _block_get_renderable_array($blockto_render);
  return drupal_render($block_output);
}

function mica_client_facet_search_load_libs() {
  $module_path_ = drupal_get_path('module', 'mica_client_facet_search');
  drupal_add_js($module_path_ . '/js/mica-client-facet-search-common.js');
  drupal_add_js($module_path_ . '/js/mica-client-facet-search_collapse_deal.js');
  drupal_add_js($module_path_ . '/js/mica-client-facet-search_tab_deal.js');
  drupal_add_js($module_path_ . '/js/mica-client-facet-search-href.js');
}

/*
 * filter the url parameter and search for tab parameter to return currect resource
 * @return tab parameter if exist
 * */
function mica_client_facet_search_get_url_tab_parameter() {
  $url_parm = explode('?', $_SERVER['REQUEST_URI']);
  $type = NULL;
  if (!empty($url_parm[1])) {
    parse_str($url_parm[1], $parts);
    if (!empty($parts['type'])) {
      $type = $parts['type'];
    }
  }
  return $type;
}

function mica_client_get_hits_entities_variable($entity) {
  return array(
    'study_totalHits' => !empty($entity['study_totalHits']) ? $entity['study_totalHits'] : NULL,
    'study_totalCount' => !empty($entity['study_totalHits']) ? $entity['study_totalHits'] : NULL,
    'variable_totalHits' => !empty($entity['variable_totalHits']) ? $entity['variable_totalHits'] : NULL,
    'variable_totalCount' => !empty($entity['variable_totalCount']) ? $entity['variable_totalCount'] : NULL,
    'network_totalHits' => !empty($entity['network_totalHits']) ? $entity['network_totalHits'] : NULL,
    'network_totalCount' => !empty($entity['network_totalCount']) ? $entity['network_totalCount'] : NULL
  );
}

function mica_client_facet_search_variable_page_search() {
  //drupal_set_title(t('@request variables search', array('@request' => ucwords($request))));
  mica_client_facet_search_load_libs();
  $studies = NULL;
  $study_charts = NULL;
  $variables = NULL;
  $networks = NULL;
  $Variable_charts = NULL;
  $search_resources = new MicaSearchResource();

  $resource = mica_client_facet_search_get_url_tab_parameter();
  if (!empty($resource)) {
    switch ($resource) {
      case  'networks':
        $networks = $search_resources->search_networks();
        extract(mica_client_get_hits_entities_variable($networks), EXTR_OVERWRITE);
        break;
      case  'studies':
        $studies = $search_resources->search_studies();
        extract(mica_client_get_hits_entities_variable($studies), EXTR_OVERWRITE);

        $study_charts = theme('mica_client_facet_search_charts', array(
          'charts' => mica_client_facet_search_get_facets_chart('facet_conf_study', $_SESSION['studies']['aggregations'])
        ));
        break;
      case  'variables' :
        $variables = $search_resources->search_variables();
        extract(mica_client_get_hits_entities_variable($variables), EXTR_OVERWRITE);
        $Variable_charts = theme('mica_client_facet_search_charts', array(
          'charts' => mica_client_facet_search_get_facets_chart('facet_conf_variable', $_SESSION['variables']['aggregations'])
        ));
        break;
      default:
        break;
    }

  }
  else {
    $variables = $search_resources->search_variables();
    $Variable_charts = theme('mica_client_facet_search_charts', array(
      'charts' => mica_client_facet_search_get_facets_chart('facet_conf_variable', $_SESSION['variables']['aggregations'])
    ));
  }
  $output = theme('mica_client_facet_search_variable-search', array(
    'noval' => '',
    'variables_result' => array(
      'data' => mica_client_facet_search_variables_table($variables)
    ),
    'variable_charts' => $Variable_charts,
    'studies' => array(
      'data' => mica_client_facet_search_studies_table($studies)

    ),
    'study_charts' => $study_charts,
    'networks' => array(
      'data' => mica_client_facet_search_networks_table($networks)
    ),
    'network_charts' => $study_charts,
    'study_totalHits' => !empty($study_totalHits) ? $study_totalHits : NULL,
    'study_totalCount' => !empty($study_totalCount) ? $study_totalCount : NULL,
    'variable_totalHits' => !empty($variable_totalHits) ? $variable_totalHits : NULL,
    'variable_totalCount' => !empty($variable_totalCount) ? $variable_totalCount : NULL,
    'network_totalHits' => !empty($network_totalHits) ? $network_totalHits : NULL,
    'network_totalCount' => !empty($network_totalCount) ? $network_totalCount : NULL
  ));
  return $output;
}


function mica_client_facet_search_study_page_search($request) {
  $output['title'] = t('Study search page');
  mica_client_facet_search_load_libs();
  $search_resources = new MicaSearchResource();
  $studies = $search_resources->search_studies();
  $study_charts = theme('mica_client_facet_search_charts', array(
    'charts' => mica_client_facet_search_get_facets_chart('mica_client_study', $_SESSION['studies']['aggregations'])
  ));
  return $study_charts . mica_client_facet_search_studies_table($studies);
}


function mica_client_facet_search_variables_table($variables) {
  $rows = array();
  if (!empty($variables['data'])) {
    foreach ($variables['data'] as $variable) {
      $name = $variable->name;
      $dataset_name = !empty($variable->datasetName) ?
        mica_client_commons_get_localized_field($variable, 'datasetName') :
        $variable->datasetId;
      $dataset_type = $variable->variableType == 'Study' ? 'study-dataset' : 'harmonization-dataset';
      $study_name = !empty($variable->studyAcronym) ? mica_client_commons_get_localized_field($variable, 'studyAcronym') : NULL;
      //dpm($variable);
      $rows[] = array(
        l($name, 'mica/variable/' . $variable->id),
        !empty($variable->variableLabel) ? mica_client_commons_get_localized_field($variable, 'variableLabel') : '-',
        l($dataset_name, 'mica/' . $dataset_type . '/' . $variable->datasetId),
        empty($variable->studyId) ? '-' : l($study_name, 'mica/study/' . $variable->studyId),
      );
    }
  }
//dpm($studies['totalHits']);
  $headers = array(
    t('Variable'),
    t('Label'),
    t('Dataset'),
    t('Study')
  );

  $args = array('quantity' => $variables['variable_totalHits']);
  pager_default_initialize($variables['variable_totalHits'], MicaSearchResource::SIZE_RESPONSE);

  return theme(
    'table',
    array(
      'header' => $headers,
      'rows' => $rows, // empty($chunks) ? array() : $chunks[$current_page],
      'empty' => t('No variable found')
    )
  ) . theme('pager', $args);
}

function mica_client_facet_search_studies_table($studies) {
  $rows = array();
  if (!empty($studies['data'])) {
    foreach ($studies['data'] as $study) {
      $name = mica_client_commons_get_localized_field($study, 'name');
      $rows[] = array(
        mica_client_commons_get_localized_field($study, 'acronym'),
        l($name, 'mica/study/' . $study->id),
        implode(', ', t($study->designs)),
        isset($study->targetNumber->noLimit) ? t('No Limit') :
          isset($study->targetNumber->number) ? $study->targetNumber->number : NULL,
        implode($study->countries),
      );
    }
  }

  $headers = array(
    t('Short Name'),
    t('Name'),
    t('Study Design'),
    t('Target number of participants'),
    t('Country of residence'),
  );

  $args = array('quantity' => $studies['study_totalHits']);
  pager_default_initialize($studies['study_totalHits'], MicaClient::SIZE_RESPONSE);

  return theme(
    'table',
    array(
      'header' => $headers,
      'rows' => $rows,
      'empty' => t('No study found')
    )
  ) . theme('pager', $args);
}

function mica_client_facet_search_networks_table($networks) {
  $rows = array();
  if (!empty($networks['data'])) {
    foreach ($networks['data'] as $network) {
      $name = mica_client_commons_get_localized_field($network, 'name');
      $rows[] = array(
        mica_client_commons_get_localized_field($network, 'acronym'),
        l($name, 'mica/network/' . $network->id . '/' . mica_client_commons_to_slug($name)),
        mica_client_commons_get_localized_field($network, 'description')
      );
    }
  }

  $headers = array(
    t('Short Name'),
    t('Name'),
    t('Description'),
  );
  $per_page = 20;

//  $args = array('quantity'=>$studies['totalHits'], 'element' => MicaDatasetResource::PAGINATE_Variables);
//  pager_default_initialize($variables['totalHits'], MicaDatasetResource::SIZE_RESPONSE, MicaDatasetResource::PAGINATE_Variables);

  $args = array('quantity' => $networks['study_totalHits'], 'element' => MicaSearchResource::PAGINATE_studies);
  $current_page = pager_default_initialize($networks['study_totalHits'], $per_page, MicaSearchResource::PAGINATE_studies);
  $chunks = array_chunk($rows, $per_page, TRUE);
  return theme(
    'table',
    array(
      'header' => $headers,
      'rows' => empty($chunks) ? array() : $chunks[$current_page],
      'empty' => t('No study found')
    )
  ) . theme('pager', $args);
}
