<?php
$path_module_protobuf = drupal_get_path('module', 'mica_client_study');
include_once($path_module_protobuf . '/mica_client_study-page-list.inc');

include_once('includes/mica_client_facet_search_resource.inc');
include_once('includes/mica_client_facet_search_resource_facet_conf.inc');
include_once('mica_client_facet_search_charts.php');

/*********Temporary*********/
$path_module_networks = drupal_get_path('module', 'mica_client_network');
include_once($path_module_networks . '/mica_client_network-page-list.inc');

function mica_client_facet_search_menu() {
  $items = array();

  $items['mica/search'] = array(
    'title' => 'Search',
    'description' => t('Search'),
    'page callback' => 'mica_client_facet_search_variable_page_search',
    'menu_name' => 'main-menu',
    'weight' => 10,
    'access callback' => TRUE
  );

  $items['mica/coverage'] = array(
    'title' => 'Classifications Coverage',
    'description' => t('Classifications Coverage'),
    'page callback' => 'mica_client_facet_search_coverage_page',
    'access callback' => TRUE
  );

  $items['mica/studies_search/%'] = array(
    'title' => t('Studies Search'),
    'description' => t('Search published studies'),
    'page callback' => 'mica_client_facet_search_study_page_search',
    'access callback' => TRUE,
    'page arguments' => array(2)
  );

  return $items;
}


/**
 * Implements hook_theme().
 *
 * copy '<modules>/mica_client_dataset/templates/'   files in  your customized theme  '<YOUR_THEME>/templates/' path
 * you can modify default display of listed page templates by rearrange block field for example
 * don't forget to clear the theme registry.
 *
 */

function mica_client_facet_search_theme($existing, $type, $theme, $path) {
  $path_theme = $path . '/templates';
  return array(
    'block__mica_client_facet_search' => array(
      'variables' => array('block' => array()),
      'template' => 'block--mica_client_facet_search',
      'path' => $path_theme
    ),
    'mica_client_facet_search_block_search' => array(
      'template' => 'mica_client_facet_search_block_search',
      'path' => $path_theme
    ),
    'mica_client_facet_search_variable-search' => array(
      'template' => 'mica_client_facet_search_variable-search',
      'path' => $path_theme
    ),
    'mica_client_facet_search_coverage' => array(
      'template' => 'mica_client_facet_search_coverage',
      'path' => $path_theme
    ),
    'mica_client_facet_search_vocabulary_coverage' => array(
      'template' => 'mica_client_facet_search_vocabulary_coverage',
      'path' => $path_theme
    ),
    'mica_client_facet_search_checkbox_term' => array(
      'template' => 'mica_client_facet_search_checkbox_term',
      'path' => $path_theme
    ),
    'mica_client_facet_search_input_text_range' => array(
      'template' => 'mica_client_facet_search_input_text_range',
      'path' => $path_theme
    ),
    'mica_client_facet_search_tab_block' => array(
      'template' => 'mica_client_facet_search_tab_block',
      'path' => $path_theme
    ),
    'mica_client_facet_search_charts' => array(
      'template' => 'mica_client_facet_search_charts',
      'path' => $path_theme
    ),
    'mica_client_facet_search_vocabulary_charts' => array(
      'template' => 'mica_client_facet_search_vocabulary_charts',
      'path' => $path_theme
    ),
  );
}

function mica_client_commons_create_facet_search_query_form($arg) {
  $args = func_get_args();
  $type = $args[2];
  if (empty($type)) {
    throw new InvalidArgumentException("drupal_get_form() form type is missing from argument list.");
    return;
  }

  $form = array();
  $form['#id'] = 'facet-search-query-form-' . $type;
  $form['#method'] = 'get';
  $form['#prefix'] = '<div class="inline-form">';
  $form['#suffix'] = '</div>';

  $input_id = "$type::matches:facet-search-query";
  $form['facet-search-query'.$type] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#description' => 'Filter by',
    '#default_value' => !empty($_GET['search-query']) ? $_GET['search-query'] : NULL,
    '#prefix' => '<div class="right-indent lg-width"><div class="input-group"><span class="input-group-addon"><i class="glyphicon glyphicon-filter"></i></span>',
    '#suffix' => "</div></div>",
    '#attributes' => array('id' => $input_id, 'name' => $input_id)
  );

  return $form;
}

/**
 * Implements hook_block_info().
 */
function mica_client_facet_search_block_info() {
  $i = 0 - count(mica_client_facet_search_resource_return_facets('facet_conf_variable'));
  foreach (mica_client_facet_search_resource_return_facets('facet_conf_variable') as $key_facet => $facet) {
    $blocks['search-' . $key_facet] = mica_client_facet_search_block_info_construct($facet['title'], $i);
    --$i;
  }

  $j = 0 - count(mica_client_facet_search_resource_return_facets('facet_conf_study'));
  foreach (mica_client_facet_search_resource_return_facets('facet_conf_study') as $key_facet => $facet) {
    $blocks['search-' . $key_facet] = mica_client_facet_search_block_info_construct($facet['title'], $j);
    --$j;
  }

  $blocks['facet-search-variables'] = array(
    'info' => t('Facet search variables'),
    'title' => t('Facet search variables'),
    'status' => 1,
    'region' => 'facets',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '*mica/search',
    'weight' => --$i,
    'custom' => 1,
  );

  $blocks['facet-search-studies'] = array(
    'info' => t('Facet search studies'),
    'title' => t('Facet search studies'),
    'status' => 1,
    'region' => 'facets',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '*mica/search',
    'weight' => --$i,
    'custom' => 1,
  );
  $blocks['facet-studies'] = array(
    'info' => t('Facet search studies'),
    'title' => t('Facet search studies'),
    'status' => 1,
    'region' => 'facets',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '*mica/studies_search/*',
    'weight' => --$i,
    'custom' => 1,
  );

  $blocks['facet-search'] = array(
    'info' => t('Facet search'),
    'title' => t('Facet search'),
    'status' => 1,
    'region' => 'facets',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '*mica/search',
    'weight' => --$i,
    'custom' => 1,
  );
  return $blocks;
}

function mica_client_facet_search_block_info_construct($facet_title, $facet_weight) {
  $facet_title_array = explode('-', $facet_title);
  return array(
    'info' => t('Facet search @title', array('@title' => drupal_strtolower(drupal_strtolower($facet_title_array[0] . ' ' . $facet_title_array[1])))),
    'title' => t('@title', array('@title' => $facet_title_array[1])),
    'status' => 0,
//    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '',
    'weight' => $facet_weight,
    'custom' => 1,
  );
}


/**
 * Implements hook_block_view().
 */
function mica_client_facet_search_block_view($delta = '') {
  switch ($delta) {
    case 'facet-search':
      if (!empty($_SESSION['variables']['request']) && $_SESSION['variables']['request'] == 'dataset') {
        $output = _mica_client_facet_search_get_facets_block_by_dto_type('facet_conf_variable', 'variables', 'child');
      }
      else {
        $output = theme('mica_client_facet_search_tab_block', array(
          'mica_client_variable' =>
            _mica_client_facet_search_get_facets_block_by_dto_type('facet_conf_variable', 'variables', 'variable'),
          'mica_client_study' =>
            _mica_client_facet_search_get_facets_block_by_dto_type('facet_conf_study', 'studies', 'study')
        ));
      }
      $block['subject'] = t('Facet search variables');
      $block['content'] = $output;
      return $block;
    case 'facet-studies' :
      $output = _mica_client_facet_search_get_facets_block_by_dto_type('facet_conf_study', 'studies', 'study');
      $block['subject'] = t('Facet search studies');
      $block['content'] = $output;
      return $block;
    default:
      foreach (mica_client_facet_search_resource_return_facets() as $key_facet => $facet) {
        if (user_access('access content') && $delta == 'search-' . $key_facet) { //good idea to check user perms here
          $facet_title_array = explode('-', $facet['title']);
          $block['subject'] = $facet_title_array;
          $block['content'] = $block['content'] = mica_client_facet_search_precess_block_theme('search-' . $facet['aggs'], 'studies');
          return $block;
        }
      }
  }
}

function _mica_client_facet_search_get_facets_block_by_dto_type($dto_type, $type) {
  $blockto_render = array();
  $facets = mica_client_facet_search_resource_return_facets($dto_type);
  //dpm(drupal_json_encode($facets));
  foreach ($facets as $key_facet => $facet) {
    $has_terms = MicaClient::has_entity_by_id_aggregation($facet['aggs']);
    if (!empty($has_terms) || ($facet['aggs'] == 'datasetId') || ($facet['aggs'] == 'networkId')) {
      $blockto_render[$dto_type . '_search-' . $key_facet] =
        block_load('mica_client_facet_search', 'search-' . $key_facet);
      $facet_title_array = explode('-', $facet['title']);
      $blockto_render[$dto_type . '_search-' . $key_facet]->subject = $facet_title_array[1];
      $blockto_render[$dto_type . '_search-' . $key_facet]->content['#markup'] = mica_client_facet_search_precess_block_theme('search-' . $facet['aggs'], $type);

    }

  }
  if (!empty($blockto_render)) {
    $block_output = _block_get_renderable_array($blockto_render);
    return drupal_render($block_output);
  }
  else {
    return NULL;
  }
}

function mica_client_facet_search_load_libs() {
  $module_path_commons = drupal_get_path('module', 'mica_client_commons');
  drupal_add_js($module_path_commons . '/js/mica-client-commons-got-top.js');
  $module_path_ = drupal_get_path('module', 'mica_client_facet_search');
  drupal_add_js($module_path_ . '/js/mica-client-facet-search-common.js');
  drupal_add_js($module_path_ . '/js/mica-client-facet-search-query-serializer.js');
  drupal_add_js($module_path_ . '/js/mica-client-facet-search_collapse_deal.js');
  drupal_add_js($module_path_ . '/js/mica-client-facet-search_tab_deal.js');
  drupal_add_js($module_path_ . '/js/mica-client-facet-search-href.js');
  $facet_conf["studies"] = mica_client_facet_search_resource_return_facets('facet_conf_study');
  $facet_conf["variables"] = mica_client_facet_search_resource_return_facets('facet_conf_variable');
  $facet_conf["general"] = //
    array( //
      'matches' => t('Matches'), //
      'match' => t('Match'), //
      'is' => t('be'), //
      'and' => t('and'), //
      'or' => t('or'), //
      'variables' => t('Variables'), //
      'datasets' => t('Datasets'), //
      'studies' => t('Studies'), //
      'networks' => t('Networks') //
    );
  drupal_add_js($module_path_ . '/js/mica-client-facet-search-query-renderer.js');
  drupal_add_js(array('mica_client_facet' => array('facet_conf' => $facet_conf)), 'setting');

}

/*
 * filter the url parameter and search for tab parameter to return currect resource
 * @return tab parameter if exist
 * */
function mica_client_facet_search_get_url_tab_parameter() {
  $url_parm = explode('?', $_SERVER['REQUEST_URI']);
  $type = 'variables';
  if (!empty($url_parm[1])) {
    parse_str($url_parm[1], $parts);
    if (!empty($parts['type'])) {
      $type = $parts['type'];
    }
  }
  return $type;
}

function mica_client_get_hits_entities_variable($entity) {
  return array(
    'study_totalHits' => !empty($entity['study_totalHits']) ? $entity['study_totalHits'] : NULL,
    'study_totalCount' => !empty($entity['study_totalHits']) ? $entity['study_totalHits'] : NULL,
    'variable_totalHits' => !empty($entity['variable_totalHits']) ? $entity['variable_totalHits'] : NULL,
    'variable_totalCount' => !empty($entity['variable_totalCount']) ? $entity['variable_totalCount'] : NULL,
    'dataset_totalHits' => !empty($entity['dataset_totalHits']) ? $entity['dataset_totalHits'] : NULL,
    'dataset_totalCount' => !empty($entity['dataset_totalCount']) ? $entity['dataset_totalCount'] : NULL,
    'network_totalHits' => !empty($entity['network_totalHits']) ? $entity['network_totalHits'] : NULL,
    'network_totalCount' => !empty($entity['network_totalCount']) ? $entity['network_totalCount'] : NULL
  );
}

function mica_client_facet_search_variable_page_search() {
  //drupal_set_title(t('@request variables search', array('@request' => ucwords($request))));
  mica_client_facet_search_load_libs();
  $studies = NULL;
  $study_charts = NULL;
  $variables = NULL;
  $networks = NULL;
  $datasets = NULL;
  $variable_charts = NULL;
  $join_query_response = NULL;
  $search_resources = new MicaSearchResource();

  $resource = mica_client_facet_search_get_url_tab_parameter();
  if (!empty($resource)) {
    switch ($resource) {
      case  'networks':
        $join_query_response = $search_resources->search_networks();
        $networks = $join_query_response->getNetworkResponseWrapper();
        extract(mica_client_get_hits_entities_variable($join_query_response->getCountStats()), EXTR_OVERWRITE);
        break;
      case  'datasets':
        $join_query_response = $search_resources->search_datasets();
        $datasets = $join_query_response->getDatasetResponseWrapper();
        extract(mica_client_get_hits_entities_variable($join_query_response->getCountStats()), EXTR_OVERWRITE);
        break;
      case  'studies':
        $join_query_response = $search_resources->search_studies();
        $studies = $join_query_response->getStudyResponseWrapper();
        extract(mica_client_get_hits_entities_variable($join_query_response->getCountStats()), EXTR_OVERWRITE);
        if (!empty($_SESSION['studies']) && !empty($_SESSION['studies']['aggregations'])) {
          $charts = mica_client_facet_search_get_facets_chart('facet_conf_study', $_SESSION['studies']['aggregations']);
          if (!empty($charts)) {
            $study_charts = theme('mica_client_facet_search_charts', array(
              'charts' => $charts
            ));
          }
        }
        break;
      case  'variables' :
        $join_query_response = $search_resources->search_variables();
        $variables = $join_query_response->getVariableResponseWrapper();
        extract(mica_client_get_hits_entities_variable($join_query_response->getCountStats()), EXTR_OVERWRITE);
        if (!empty($_SESSION['variables']) && !empty($_SESSION['variables']['aggregations'])) {
          $charts = mica_client_facet_search_get_facets_chart('facet_conf_variable', $_SESSION['variables']['aggregations']);
          if (!empty($charts)) {
            $variable_charts = theme('mica_client_facet_search_charts', array(
              'charts' => $charts
            ));
          }
        }
        break;
    }

  }
  else {
    $join_query_response = $search_resources->search_variables();
    $variables = $join_query_response->getVariableResponseWrapper();
    if (!empty($_SESSION['variables']) && !empty($_SESSION['variables']['aggregations'])) {
      $charts = mica_client_facet_search_get_facets_chart('facet_conf_variable', $_SESSION['variables']['aggregations']);
      if (!empty($charts)) {
        $variable_charts = theme('mica_client_facet_search_charts', array(
          'charts' => $charts
        ));
      }
    }
  }

  $url_parm = explode('?', $_SERVER['REQUEST_URI']);
  if (!empty($url_parm[1])) {
    parse_str($url_parm[1], $parts);
  }

  $output = theme('mica_client_facet_search_variable-search',
    array(
      'noval' => '',
      'query' => empty($parts['query']) ? '' : $parts['query'],
      'variables_result' => array('data' => mica_client_facet_search_variables_table($variables)),
      'variable_charts' => $variable_charts,
      'variable_totalHits' => !empty($variable_totalHits) ? $variable_totalHits : NULL,
      'variable_totalCount' => !empty($variable_totalCount) ? $variable_totalCount : NULL,
      'variable_search_form' => drupal_get_form('mica_client_commons_create_facet_search_query_form', 'variables'),
      'datasets' => array('data' => mica_client_facet_search_datasets_table($datasets)),
      'dataset_totalHits' => !empty($dataset_totalHits) ? $dataset_totalHits : NULL,
      'dataset_totalCount' => !empty($dataset_totalCount) ? $dataset_totalCount : NULL,
      'dataset_search_form' => drupal_get_form('mica_client_commons_create_facet_search_query_form', 'datasets'),
      'studies' => array('data' => mica_client_facet_search_studies_table($studies)),
      'study_charts' => $study_charts,
      'study_totalHits' => !empty($study_totalHits) ? $study_totalHits : NULL,
      'study_totalCount' => !empty($study_totalCount) ? $study_totalCount : NULL,
      'study_search_form' => drupal_get_form('mica_client_commons_create_facet_search_query_form', 'studies'),
      'networks' => array('data' => mica_client_facet_search_networks_table($networks)),
      'network_totalHits' => !empty($network_totalHits) ? $network_totalHits : NULL,
      'network_totalCount' => !empty($network_totalCount) ? $network_totalCount : NULL,
      'network_search_form' => drupal_get_form('mica_client_commons_create_facet_search_query_form', 'networks')
    ));
  return $output;
}

Function mica_client_facet_search_get_buckets($vocabulary_coverage, $all_bucket) {
  if (!empty($vocabulary_coverage->buckets)) {
    foreach ($vocabulary_coverage->buckets as $bucket) {
      if ((string) $bucket->value == (string) $all_bucket->value) {
        return $bucket;
      }
    }
  }
  return FALSE;
}


Function mica_client_facet_search_get_terms($terms_buckets, $all_bucket) {
  if (!empty($terms_buckets->buckets)) {
    foreach ($terms_buckets->buckets as $bucket) {
      if ((string) $bucket->value == (string) $all_bucket->value) {
        return $bucket;
      }
    }
  }
  return FALSE;
}

function mica_client_facet_search_coverage_page() {
  mica_client_facet_search_load_libs();
  $url_param = explode('?', $_SERVER['REQUEST_URI']);
  if (!empty($url_param[1])) {
    parse_str($url_param[1], $parts);
  }
  $bucket_names = array();
  $vocabulary_coverage_outputs = array();
  $vocabulary_coverage_output = array();
  $search_resources = new MicaSearchResource();
  $coverages = $search_resources->taxonomies_coverage();
  if (!empty($coverages->taxonomies)) {
    foreach ($coverages->taxonomies as $taxonomy_coverage) {
      $formatted_vocabulary_coverage = new stdClass();
      foreach ($taxonomy_coverage->vocabularies as $vocabulary_coverage) {
        if (!empty($taxonomy_coverage->buckets)) {
          //  dpm($taxonomy_coverage->buckets);
          foreach ($taxonomy_coverage->buckets as $key_bucket => $all_bucket) {
            $formatted_bucket = new stdClass();
            $formatted_bucket->field = $all_bucket->field;
            $formatted_bucket->value = $all_bucket->value . '-nolink';
            $formatted_bucket->hits = 0;
            $formatted_bucket->count = 0;

            $bucket_returned = mica_client_facet_search_get_buckets($vocabulary_coverage, $all_bucket);
            if (!empty($bucket_returned)) {
              $formatted_vocabulary_coverage->buckets[$key_bucket] = $bucket_returned;
              $bucket_names[$key_bucket] = $bucket_returned->value;
            }
            else {
              $formatted_vocabulary_coverage->buckets[$key_bucket] = $formatted_bucket;
              $bucket_names[$key_bucket] = $formatted_bucket->value;
            }


            foreach ($vocabulary_coverage->terms as $key_term => $term) {
              $returned_term_bucket = mica_client_facet_search_get_terms($vocabulary_coverage, $all_bucket);
              if (!empty($returned_term_bucket)) {
                $formatted_vocabulary_coverage->terms[$key_term]->buckets[$key_bucket] = $returned_term_bucket;
              }
              else {
                $formatted_vocabulary_coverage->terms[$key_term]->buckets[$key_bucket] = $formatted_bucket;
              }
            }

          }
        }
        unset($vocabulary_coverage->buckets);
        $vocabulary_coverage_merged = (object) array_merge((array) $formatted_vocabulary_coverage, (array) $vocabulary_coverage);
        $vocabulary_coverage_output[$vocabulary_coverage_merged->vocabulary->name] = theme('mica_client_facet_search_vocabulary_coverage', array(
          'taxonomy' => $taxonomy_coverage->taxonomy,
          'vocabulary_coverage' => $vocabulary_coverage_merged,
          'chart' => theme('mica_client_facet_search_vocabulary_charts', array(
            'vocabulary_coverage' => $vocabulary_coverage_merged,
            'chart' => mica_client_facet_search_vocabulary_chart($vocabulary_coverage_merged),
          )),
          'bucket_names' => $bucket_names,
          'vocabulary_attribute' => 'attributes-' . $taxonomy_coverage->taxonomy->name . '__' . $vocabulary_coverage_merged->vocabulary->name . '-und'
        ));
      }
      $vocabulary_coverage_outputs[$taxonomy_coverage->taxonomy->name] = $vocabulary_coverage_output;
    }
  }

  $output = theme('mica_client_facet_search_coverage', array(
    'coverages' => $coverages,
    'vocabulary_coverage_outputs' => $vocabulary_coverage_outputs,
    'query' => !empty($parts['query']) ? $parts['query'] : NULL,
    'group_by' => !empty($parts['group-by']) ? $parts['group-by'] : NULL,
  ));
  return $output;
}

function mica_client_facet_search_study_page_search() {
  $output['title'] = t('Study search page');
  mica_client_facet_search_load_libs();
  $search_resources = new MicaSearchResource();
  $facet_search_response = $search_resources->search_studies();
  $study_charts = theme('mica_client_facet_search_charts', array(
    'charts' => mica_client_facet_search_get_facets_chart('mica_client_study', $_SESSION['studies']['aggregations'])
  ));
  return $study_charts . mica_client_facet_search_studies_table($facet_search_response);
}


function mica_client_facet_search_variables_table($variables) {
  $rows = array();
  $totalHits = 0;
  $has_study = FALSE;

  if (!empty($variables)) {
    $totalHits = $variables->getTotalHits();
    $summaries = $variables->getSummaries();
    foreach ($summaries as $variable) {
      $name = $variable->name;
      $dataset_name = !empty($variable->datasetAcronym) ?
        mica_client_commons_get_localized_field($variable, 'datasetAcronym') :
        $variable->datasetId;
      $dataset_type = $variable->variableType == 'Study' ? 'study-dataset' : 'harmonization-dataset';
      $study_name = !empty($variable->studyAcronym) ? mica_client_commons_get_localized_field($variable, 'studyAcronym') : NULL;
      $variable_label = !empty($variable->variableLabel) ? mica_client_commons_get_localized_field($variable, 'variableLabel') : NULL;

      $row = array(
        l($name, 'mica/variable/' . $variable->id),
        !empty($variable_label) ? $variable_label : '-',
        l($dataset_name, 'mica/' . $dataset_type . '/' . $variable->datasetId),
      );

      if(!empty($variable->studyId)) {
        $row[] = l($study_name, 'mica/study/' . $variable->studyId);
        $has_study = TRUE;
      }
      $rows[] = $row;
    }
  }

  // this is just a temporary trick to hide an empty column
  // study count with search link is expected instead
  if ($has_study) {
    for ($i = 0; $i<count($rows); $i++) {
      if (count($rows[$i]) == 3) {
        $rows[$i][] = '-';
      }
    }
  }

  $headers = array(
    t('Variable'),
    t('Label'),
    t('Dataset'),
  );
  if ($has_study) {
    $headers[] = t('Study');
  }
  pager_default_initialize($totalHits, MicaSearchResource::SIZE_RESPONSE);
  return theme(
    'table',
    array(
      'header' => $headers,
      'rows' => $rows, // empty($chunks) ? array() : $chunks[$current_page],
      'empty' => t('No variable found')
    )
  ) . theme('pager');
}

function mica_client_facet_search_studies_table($studies) {
  $rows = array();
  $totalHits = 0;

  if (!empty($studies)) {
    $totalHits = $studies->getTotalHits();
    $summaries = $studies->getSummaries();
    $rows[] = array(
      '',
      '',
      '',
      t('Quest'),
      t('PM'),
      t('Bio'),
      t('Others'),
      '',
      '',
      t('Study'),
      t('Harmonization'),
      ''
    );

    foreach ($summaries as $study) {
      $query_studies_param =
        MicaClient::add_parameter_dto_query_link(array(
          'variables' => array('terms' => array('studyIds' => $study->id))
        ));

      $query_studies_param_harmo =
        MicaClient::add_parameter_dto_query_link(array(
          'variables' =>
            array('terms' => array('studyIds' => $study->id, 'variableType' => 'dataschema'))
        ));

      $query_studies_param_dataset =
        MicaClient::add_parameter_dto_query_link(array(
          'variables' =>
            array('terms' => array('studyIds' => $study->id, 'variableType' => 'study'))
        ));

      $number_variables = $study->{'obiba.mica.CountStatsDto.studyCountStats'}->variables;
      //MicaClient::mica_client_facet_search_get_item_count('studies', 'variables', $study->id);


      $number_tables_study_harmo = $study->{'obiba.mica.CountStatsDto.studyCountStats'}->harmonizationDatasets;
      //    MicaClient::mica_client_facet_search_get_item_count('studies', 'studyTables-studyId', $study->id);
      $number_table_study_study = $study->{'obiba.mica.CountStatsDto.studyCountStats'}->studyDatasets;
      // MicaClient::mica_client_facet_search_get_item_count('studies', 'studyTable-studyId', $study->id);

      $number_networks_study = $study->{'obiba.mica.CountStatsDto.studyCountStats'}->networks;
      // MicaClient::mica_client_facet_search_get_item_count('studies', 'networks-studyId', $study->id);

      $name = mica_client_commons_get_localized_field($study, 'name');

      $rows[] = array(
        /*acronym*/
        l(mica_client_commons_get_localized_field($study, 'acronym'), 'mica/study/' . $study->id),
        /*name*/
        $name,
        /*Type*/
        implode(', ', t($study->designs)),
        /*Quest-DSA*/
        array(
          'data' => !empty($study->dataSources) && mica_client_facet_search_has_datasource($study->dataSources, 'questionnaires') ?
              '<i class="glyphicon glyphicon-ok"></i>' : '--',
          'class' => 'checkebox'
        ),
        /*PM-DSA*/
        array(
          'data' => !empty($study->dataSources) && mica_client_facet_search_has_datasource($study->dataSources, 'physical_measures') ?
              '<i class="glyphicon glyphicon-ok"></i>' : '--',
          'class' => 'checkebox'
        ),
        /*Bio-DSA*/
        array(
          'data' => !empty($study->dataSources) && mica_client_facet_search_has_datasource($study->dataSources, 'biological_samples') ?
              '<i class="glyphicon glyphicon-ok"></i>' : '--',
          'class' => 'checkebox'
        ),
        /*Others-DSA*/
        array(
          'data' => !empty($study->dataSources) && mica_client_facet_search_has_datasource($study->dataSources, 'others') ?
              '<i class="glyphicon glyphicon-ok"></i>' : '--',
          'class' => 'checkebox'
        ),
        /*Participants*/
        isset($study->targetNumber->noLimit) ? t('No Limit') :
          isset($study->targetNumber->number) ? $study->targetNumber->number : NULL,
        /*Networks*/
        !empty($number_networks_study) ?
          l($number_networks_study, 'mica/search', array(
            'query' => array(
              'type' => 'networks',
              'query' => $query_studies_param
            )
          )) : '-',
        /*Study-dataset*/
        !empty($number_table_study_study) ? l($number_table_study_study, 'mica/search', array(
          'query' => array(
            'type' => 'datasets',
            'query' => $query_studies_param_dataset
          )
        )) : '-',
        /*Harmonization-dataset*/
        !empty($number_tables_study_harmo) ? l($number_tables_study_harmo, 'mica/search', array(
          'query' => array(
            'type' => 'datasets',
            'query' => $query_studies_param_harmo
          )
        )) : '-',
        /*Variables*/
        !empty($number_variables) ?
          l($number_variables, 'mica/search', array(
            'query' => array(
              'type' => 'variables',
              'query' => $query_studies_param
            )
          ))
          : '-',
      );
    }
  }
// t('Quest'), t('PM'), t('Bio'),t('Others'),
  $headers = array(
    array('data' => t('Acronym'), 'class' => 'col-sm-1'),
    array('data' => t('Name'), 'class' => 'col-sm-3'),
    array('data' => t('Type'), 'class' => 'col-sm-1'),
    array('data' => t('Data Sources Available'), 'colspan' => 4, 'class' => 'col-sm-3 checkebox'),
    array('data' => t('Participants'), 'class' => 'col-sm-1'),
    array('data' => t('Networks'), 'class' => 'col-sm-1'),
    array('data' => t('Datasets'), 'colspan' => 2, 'class' => 'col-sm-2'),
    array('data' => t('Variables'), 'class' => 'col-sm-1'),
  );

  pager_default_initialize($totalHits, MicaClient::SIZE_RESPONSE);
  return theme(
    'table',
    array(
      'header' => $headers,
      'rows' => $rows,
      'empty' => t('No study found'),
      'attributes' => array(
        'id' => 'studies-results',
        'class' => array('table-bordered', 'table-hover', 'table-condensed')
      )
    )
  ) . theme('pager');
}

function mica_client_facet_search_has_datasource($dataSources, $value) {
  foreach ($dataSources as $value_term) {
    if ($value_term == $value) {
      return TRUE;
    }
  }
  return FALSE;
}

function mica_client_facet_search_datasets_table($datasets) {
  $rows = array();
  $totalHits = 0;

  if (!empty($datasets)) {
    $totalHits = $datasets->getTotalHits();
    $summaries = $datasets->getSummaries();
    foreach ($summaries as $dataset) {
      $query_datasets_param =
        MicaClient::add_parameter_dto_query_link(array('variables' => array('terms' => array('datasetId' => $dataset->id))));

      $count_networks = !empty($dataset->{'obiba.mica.CountStatsDto.datasetCountStats'}->networks) ?
        $dataset->{'obiba.mica.CountStatsDto.datasetCountStats'}->networks : NULL;

      $count_studies = !empty($dataset->{'obiba.mica.CountStatsDto.datasetCountStats'}->studies) ?
        $dataset->{'obiba.mica.CountStatsDto.datasetCountStats'}->studies : NULL;

      $count_variables = !empty($dataset->{'obiba.mica.CountStatsDto.datasetCountStats'}->variables) ?
        $dataset->{'obiba.mica.CountStatsDto.datasetCountStats'}->variables : NULL;

      if (!empty($dataset->{'obiba.mica.StudyDatasetDto.type'})) {
        $type_dataset_link = 'study-dataset';
        $type_dataset = t('Study');
      }
      else {
        $type_dataset_link = 'harmonization-dataset';
        $type_dataset = t('Harmonized');
      }
      $name = mica_client_commons_get_localized_field($dataset, 'name');
      $rows[] = array(
        l(mica_client_commons_get_localized_field($dataset, 'acronym'), 'mica/' . $type_dataset_link . '/' . $dataset->id),
        $name,
        $type_dataset,
        !empty($count_networks) ?
          l($count_networks, 'mica/search', array(
            'query' => array(
              'type' => 'networks',
              'query' => $query_datasets_param
            )
          ))
          : '--',
        !empty($count_studies) ?
          l($count_studies, 'mica/search', array(
            'query' => array(
              'type' => 'studies',
              'query' => $query_datasets_param
            )
          ))
          : '--',
        !empty($count_variables) ?
          l($count_variables, 'mica/search', array(
            'query' => array(
              'type' => 'variables',
              'query' => $query_datasets_param
            )
          ))
          : '--'

      );
    }
  }

  $headers = array(
    t('Acronym'),
    t('Name'),
    t('Type'),
    t('Networks'),
    t('Studies'),
    t('Variables'),
  );

  pager_default_initialize($totalHits, MicaClient::SIZE_RESPONSE);
  return theme(
    'table',
    array(
      'header' => $headers,
      'rows' => $rows,
      'empty' => t('No dataset found'),
    )
  ) . theme('pager');
}

function mica_client_facet_search_networks_table($networks) {
  $rows = array();
  $totalHits = 0;

  if (!empty($networks)) {
    $totalHits = $networks->getTotalHits();
    $rows[] = array(
      '',
      '',
      '',
      t('Study'),
      t('Harmonization'),
      ''
    );

    $summaries = $networks->getSummaries();
    foreach ($summaries as $network) {
      $param_network_query =
        MicaClient::add_parameter_dto_query_link(array('networks' => array('terms' => array('id' => $network->id))));

      $param_network_query_harmo_dataset =
        MicaClient::add_parameter_dto_query_link(
          array(
            'networks' => array('terms' => array('id' => $network->id)),
            'variables' => array('terms' => array('variableType' => 'dataschema'))
          )
        );

      $param_network_query_study_dataset =
        MicaClient::add_parameter_dto_query_link(
          array(
            'networks' => array('terms' => array('id' => $network->id)),
            'variables' => array('terms' => array('variableType' => 'study'))
          )
        );

      $studies_count = !empty($network->{'obiba.mica.CountStatsDto.networkCountStats'}->studies) ?
        $network->{'obiba.mica.CountStatsDto.networkCountStats'}->studies : NULL;

      $datasets_study_count = !empty($network->{'obiba.mica.CountStatsDto.networkCountStats'}->studyDatasets) ?
        $network->{'obiba.mica.CountStatsDto.networkCountStats'}->studyDatasets : NULL;

      $datasets_harmonized_count = !empty($network->{'obiba.mica.CountStatsDto.networkCountStats'}->harmonizationDatasets) ?
        $network->{'obiba.mica.CountStatsDto.networkCountStats'}->harmonizationDatasets : NULL;

      $variables_count = !empty($network->{'obiba.mica.CountStatsDto.networkCountStats'}->variables) ?
        $network->{'obiba.mica.CountStatsDto.networkCountStats'}->variables : NULL;

      $name = mica_client_commons_get_localized_field($network, 'name');


      $rows[] = array(
        l(mica_client_commons_get_localized_field($network, 'acronym'), 'mica/network/' . $network->id),
        $name,
        l($studies_count, 'mica/search', array(
          'query' => array(
            'type' => 'studies',
            'query' => $param_network_query
          )
        )),
        l($datasets_study_count, 'mica/search', array(
          'query' => array(
            'type' => 'datasets',
            'query' => $param_network_query_study_dataset
          )
        )),
        l($datasets_harmonized_count, 'mica/search', array(
          'query' => array(
            'type' => 'datasets',
            'query' => $param_network_query_harmo_dataset
          )
        )),
        l($variables_count, 'mica/search', array(
          'query' => array(
            'type' => 'variables',
            'query' => $param_network_query
          )
        )),
      );
    }
  }

  $headers = array(
    /*Short Name*/
    t('Acronym'),
    /*Name*/
    t('Name'),
    /*Studies cout*/
    t('Studies'),
    /*Datasets counts*/
    array('data' => t('Datasets'), 'colspan' => 2),
    /*Variables Counts*/
    t('Variables'),
  );

  pager_default_initialize($totalHits, MicaClient::SIZE_RESPONSE);

  return theme(
    'table',
    array(
      'header' => $headers,
      'rows' => $rows,
      'empty' => t('No network found'),
      'attributes' => array(
        'id' => 'networks-results',
        'class' => array('table-bordered', 'table-hover', 'table-condensed')
      )
    )
  ) . theme('pager');
}

function mica_client_facet_search_get_studies_count_from_dto($dto) {
  $studies = array();
  $count_study = 0;
  $studyIds = array();
  foreach ($dto->studyIds as $studyId) {
    $studies['count'] = ++$count_study;
    $studyIds[] = $studyId;
  }
  $studies['ids'] = $studyIds;
  return $studies;
}

function mica_client_facet_search_get_variables_count_from_studies_dto($studies) {
  $varcount = 0;
  foreach ($_SESSION['variables']['aggregations'] as $aggregation) {
    if ($aggregation->aggregation == 'studyIds') {
      foreach ($aggregation->{'obiba.mica.TermsAggregationResultDto.terms'} as $study) {
        if (in_array($study->key, $studies)) {
          $varcount += $study->count;
        }
      }
      return $varcount;
    }
  }
}


