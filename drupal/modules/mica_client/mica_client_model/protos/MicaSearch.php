<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: MicaSearch.proto
//   Date: 2014-09-03 18:49:04

namespace obiba\mica {

  class QueryDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $from = 0;
    
    /**  @var int */
    public $size = 10;
    
    /**  @var boolean */
    public $detailed = true;
    
    /**  @var \obiba\mica\FilteredQueryDto */
    public $filteredQuery = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.QueryDto');

      // REQUIRED INT32 from = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "from";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default   = 0;
      $descriptor->addField($f);

      // REQUIRED INT32 size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default   = 10;
      $descriptor->addField($f);

      // REQUIRED BOOL detailed = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "detailed";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default   = true;
      $descriptor->addField($f);

      // REQUIRED MESSAGE filteredQuery = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "filteredQuery";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\FilteredQueryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom(){
      return $this->_has(1);
    }
    
    /**
     * Clear <from> value
     *
     * @return \obiba\mica\QueryDto
     */
    public function clearFrom(){
      return $this->_clear(1);
    }
    
    /**
     * Get <from> value
     *
     * @return int
     */
    public function getFrom(){
      return $this->_get(1);
    }
    
    /**
     * Set <from> value
     *
     * @param int $value
     * @return \obiba\mica\QueryDto
     */
    public function setFrom( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <size> value
     *
     * @return \obiba\mica\QueryDto
     */
    public function clearSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \obiba\mica\QueryDto
     */
    public function setSize( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <detailed> has a value
     *
     * @return boolean
     */
    public function hasDetailed(){
      return $this->_has(3);
    }
    
    /**
     * Clear <detailed> value
     *
     * @return \obiba\mica\QueryDto
     */
    public function clearDetailed(){
      return $this->_clear(3);
    }
    
    /**
     * Get <detailed> value
     *
     * @return boolean
     */
    public function getDetailed(){
      return $this->_get(3);
    }
    
    /**
     * Set <detailed> value
     *
     * @param boolean $value
     * @return \obiba\mica\QueryDto
     */
    public function setDetailed( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <filteredQuery> has a value
     *
     * @return boolean
     */
    public function hasFilteredQuery(){
      return $this->_has(4);
    }
    
    /**
     * Clear <filteredQuery> value
     *
     * @return \obiba\mica\QueryDto
     */
    public function clearFilteredQuery(){
      return $this->_clear(4);
    }
    
    /**
     * Get <filteredQuery> value
     *
     * @return \obiba\mica\FilteredQueryDto
     */
    public function getFilteredQuery(){
      return $this->_get(4);
    }
    
    /**
     * Set <filteredQuery> value
     *
     * @param \obiba\mica\FilteredQueryDto $value
     * @return \obiba\mica\QueryDto
     */
    public function setFilteredQuery(\obiba\mica\FilteredQueryDto $value){
      return $this->_set(4, $value);
    }
  }
}

namespace obiba\mica {

  class FilteredQueryDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\BoolFilterQueryDto */
    public $filter = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.FilteredQueryDto');

      // REQUIRED MESSAGE filter = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\BoolFilterQueryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(1);
    }
    
    /**
     * Clear <filter> value
     *
     * @return \obiba\mica\FilteredQueryDto
     */
    public function clearFilter(){
      return $this->_clear(1);
    }
    
    /**
     * Get <filter> value
     *
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function getFilter(){
      return $this->_get(1);
    }
    
    /**
     * Set <filter> value
     *
     * @param \obiba\mica\BoolFilterQueryDto $value
     * @return \obiba\mica\FilteredQueryDto
     */
    public function setFilter(\obiba\mica\BoolFilterQueryDto $value){
      return $this->_set(1, $value);
    }
  }
}

namespace obiba\mica {

  class BoolFilterQueryDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\FilterQueryDto[]  */
    public $filters = array();
    
    /**  @var \obiba\mica\ParentChildFilterDto */
    public $parentChildFilter = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.BoolFilterQueryDto');

      // REPEATED MESSAGE filters = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "filters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\FilterQueryDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE parentChildFilter = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "parentChildFilter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\ParentChildFilterDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <filters> has a value
     *
     * @return boolean
     */
    public function hasFilters(){
      return $this->_has(1);
    }
    
    /**
     * Clear <filters> value
     *
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function clearFilters(){
      return $this->_clear(1);
    }
    
    /**
     * Get <filters> value
     *
     * @param int $idx
     * @return \obiba\mica\FilterQueryDto
     */
    public function getFilters($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <filters> value
     *
     * @param \obiba\mica\FilterQueryDto $value
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function setFilters(\obiba\mica\FilterQueryDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <filters>
     *
     * @return \obiba\mica\FilterQueryDto[]
     */
    public function getFiltersList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <filters>
     *
     * @param \obiba\mica\FilterQueryDto $value
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function addFilters(\obiba\mica\FilterQueryDto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <parentChildFilter> has a value
     *
     * @return boolean
     */
    public function hasParentChildFilter(){
      return $this->_has(2);
    }
    
    /**
     * Clear <parentChildFilter> value
     *
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function clearParentChildFilter(){
      return $this->_clear(2);
    }
    
    /**
     * Get <parentChildFilter> value
     *
     * @return \obiba\mica\ParentChildFilterDto
     */
    public function getParentChildFilter(){
      return $this->_get(2);
    }
    
    /**
     * Set <parentChildFilter> value
     *
     * @param \obiba\mica\ParentChildFilterDto $value
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function setParentChildFilter(\obiba\mica\ParentChildFilterDto $value){
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica\ParentChildFilterDto {

  class Relationship extends \DrSlump\Protobuf\Enum {
    const PARENT = 0;
    const CHILD = 1;
  }
}
namespace obiba\mica {

  class ParentChildFilterDto extends \DrSlump\Protobuf\Message {

    /**  @var int - \obiba\mica\ParentChildFilterDto\Relationship */
    public $relationship = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var \obiba\mica\FilteredQueryDto */
    public $filteredQuery = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.ParentChildFilterDto');

      // REQUIRED ENUM relationship = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "relationship";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\ParentChildFilterDto\Relationship';
      $descriptor->addField($f);

      // REQUIRED STRING type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE filteredQuery = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "filteredQuery";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\FilteredQueryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <relationship> has a value
     *
     * @return boolean
     */
    public function hasRelationship(){
      return $this->_has(1);
    }
    
    /**
     * Clear <relationship> value
     *
     * @return \obiba\mica\ParentChildFilterDto
     */
    public function clearRelationship(){
      return $this->_clear(1);
    }
    
    /**
     * Get <relationship> value
     *
     * @return int - \obiba\mica\ParentChildFilterDto\Relationship
     */
    public function getRelationship(){
      return $this->_get(1);
    }
    
    /**
     * Set <relationship> value
     *
     * @param int - \obiba\mica\ParentChildFilterDto\Relationship $value
     * @return \obiba\mica\ParentChildFilterDto
     */
    public function setRelationship( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \obiba\mica\ParentChildFilterDto
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \obiba\mica\ParentChildFilterDto
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <filteredQuery> has a value
     *
     * @return boolean
     */
    public function hasFilteredQuery(){
      return $this->_has(3);
    }
    
    /**
     * Clear <filteredQuery> value
     *
     * @return \obiba\mica\ParentChildFilterDto
     */
    public function clearFilteredQuery(){
      return $this->_clear(3);
    }
    
    /**
     * Get <filteredQuery> value
     *
     * @return \obiba\mica\FilteredQueryDto
     */
    public function getFilteredQuery(){
      return $this->_get(3);
    }
    
    /**
     * Set <filteredQuery> value
     *
     * @param \obiba\mica\FilteredQueryDto $value
     * @return \obiba\mica\ParentChildFilterDto
     */
    public function setFilteredQuery(\obiba\mica\FilteredQueryDto $value){
      return $this->_set(3, $value);
    }
  }
}

namespace obiba\mica {

  class FilterQueryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.FilterQueryDto');

      // REQUIRED STRING field = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(1);
    }
    
    /**
     * Clear <field> value
     *
     * @return \obiba\mica\FilterQueryDto
     */
    public function clearField(){
      return $this->_clear(1);
    }
    
    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField(){
      return $this->_get(1);
    }
    
    /**
     * Set <field> value
     *
     * @param string $value
     * @return \obiba\mica\FilterQueryDto
     */
    public function setField( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace obiba\mica {

  class TermsFilterQueryDto extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $values = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TermsFilterQueryDto');

      // REPEATED STRING values = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(2);
    }
    
    /**
     * Clear <values> value
     *
     * @return \obiba\mica\TermsFilterQueryDto
     */
    public function clearValues(){
      return $this->_clear(2);
    }
    
    /**
     * Get <values> value
     *
     * @param int $idx
     * @return string
     */
    public function getValues($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <values> value
     *
     * @param string $value
     * @return \obiba\mica\TermsFilterQueryDto
     */
    public function setValues( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <values>
     *
     * @return string[]
     */
    public function getValuesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <values>
     *
     * @param string $value
     * @return \obiba\mica\TermsFilterQueryDto
     */
    public function addValues( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica\RangeConditionDto {

  class Operator extends \DrSlump\Protobuf\Enum {
    const LT = 0;
    const LTE = 1;
    const GT = 2;
    const GTE = 3;
  }
}
namespace obiba\mica {

  class RangeConditionDto extends \DrSlump\Protobuf\Message {

    /**  @var int - \obiba\mica\RangeConditionDto\Operator */
    public $op = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.RangeConditionDto');

      // REQUIRED ENUM op = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "op";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\RangeConditionDto\Operator';
      $descriptor->addField($f);

      // REQUIRED STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <op> has a value
     *
     * @return boolean
     */
    public function hasOp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <op> value
     *
     * @return \obiba\mica\RangeConditionDto
     */
    public function clearOp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <op> value
     *
     * @return int - \obiba\mica\RangeConditionDto\Operator
     */
    public function getOp(){
      return $this->_get(1);
    }
    
    /**
     * Set <op> value
     *
     * @param int - \obiba\mica\RangeConditionDto\Operator $value
     * @return \obiba\mica\RangeConditionDto
     */
    public function setOp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \obiba\mica\RangeConditionDto
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \obiba\mica\RangeConditionDto
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class RangeFilterQueryDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\RangeConditionDto */
    public $from = null;
    
    /**  @var \obiba\mica\RangeConditionDto */
    public $to = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.RangeFilterQueryDto');

      // OPTIONAL MESSAGE from = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "from";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\RangeConditionDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "to";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\RangeConditionDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom(){
      return $this->_has(1);
    }
    
    /**
     * Clear <from> value
     *
     * @return \obiba\mica\RangeFilterQueryDto
     */
    public function clearFrom(){
      return $this->_clear(1);
    }
    
    /**
     * Get <from> value
     *
     * @return \obiba\mica\RangeConditionDto
     */
    public function getFrom(){
      return $this->_get(1);
    }
    
    /**
     * Set <from> value
     *
     * @param \obiba\mica\RangeConditionDto $value
     * @return \obiba\mica\RangeFilterQueryDto
     */
    public function setFrom(\obiba\mica\RangeConditionDto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <to> has a value
     *
     * @return boolean
     */
    public function hasTo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <to> value
     *
     * @return \obiba\mica\RangeFilterQueryDto
     */
    public function clearTo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <to> value
     *
     * @return \obiba\mica\RangeConditionDto
     */
    public function getTo(){
      return $this->_get(2);
    }
    
    /**
     * Set <to> value
     *
     * @param \obiba\mica\RangeConditionDto $value
     * @return \obiba\mica\RangeFilterQueryDto
     */
    public function setTo(\obiba\mica\RangeConditionDto $value){
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class QueryResultDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\AggregationResultDto[]  */
    public $aggs = array();
    
    /**  @var int */
    public $totalHits = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.QueryResultDto');

      // REPEATED MESSAGE aggs = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "aggs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AggregationResultDto';
      $descriptor->addField($f);

      // REQUIRED INT32 totalHits = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "totalHits";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <aggs> has a value
     *
     * @return boolean
     */
    public function hasAggs(){
      return $this->_has(1);
    }
    
    /**
     * Clear <aggs> value
     *
     * @return \obiba\mica\QueryResultDto
     */
    public function clearAggs(){
      return $this->_clear(1);
    }
    
    /**
     * Get <aggs> value
     *
     * @param int $idx
     * @return \obiba\mica\AggregationResultDto
     */
    public function getAggs($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <aggs> value
     *
     * @param \obiba\mica\AggregationResultDto $value
     * @return \obiba\mica\QueryResultDto
     */
    public function setAggs(\obiba\mica\AggregationResultDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <aggs>
     *
     * @return \obiba\mica\AggregationResultDto[]
     */
    public function getAggsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <aggs>
     *
     * @param \obiba\mica\AggregationResultDto $value
     * @return \obiba\mica\QueryResultDto
     */
    public function addAggs(\obiba\mica\AggregationResultDto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <totalHits> has a value
     *
     * @return boolean
     */
    public function hasTotalHits(){
      return $this->_has(2);
    }
    
    /**
     * Clear <totalHits> value
     *
     * @return \obiba\mica\QueryResultDto
     */
    public function clearTotalHits(){
      return $this->_clear(2);
    }
    
    /**
     * Get <totalHits> value
     *
     * @return int
     */
    public function getTotalHits(){
      return $this->_get(2);
    }
    
    /**
     * Set <totalHits> value
     *
     * @param int $value
     * @return \obiba\mica\QueryResultDto
     */
    public function setTotalHits( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class StudyResultDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\StudySummaryDto[]  */
    public $summaries = array();
    
    /**  @var \obiba\mica\StudyDto[]  */
    public $studies = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyResultDto');

      // REPEATED MESSAGE summaries = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "summaries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\StudySummaryDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE studies = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "studies";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\StudyDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <summaries> has a value
     *
     * @return boolean
     */
    public function hasSummaries(){
      return $this->_has(1);
    }
    
    /**
     * Clear <summaries> value
     *
     * @return \obiba\mica\StudyResultDto
     */
    public function clearSummaries(){
      return $this->_clear(1);
    }
    
    /**
     * Get <summaries> value
     *
     * @param int $idx
     * @return \obiba\mica\StudySummaryDto
     */
    public function getSummaries($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <summaries> value
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\StudyResultDto
     */
    public function setSummaries(\obiba\mica\StudySummaryDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <summaries>
     *
     * @return \obiba\mica\StudySummaryDto[]
     */
    public function getSummariesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <summaries>
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\StudyResultDto
     */
    public function addSummaries(\obiba\mica\StudySummaryDto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <studies> has a value
     *
     * @return boolean
     */
    public function hasStudies(){
      return $this->_has(2);
    }
    
    /**
     * Clear <studies> value
     *
     * @return \obiba\mica\StudyResultDto
     */
    public function clearStudies(){
      return $this->_clear(2);
    }
    
    /**
     * Get <studies> value
     *
     * @param int $idx
     * @return \obiba\mica\StudyDto
     */
    public function getStudies($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <studies> value
     *
     * @param \obiba\mica\StudyDto $value
     * @return \obiba\mica\StudyResultDto
     */
    public function setStudies(\obiba\mica\StudyDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <studies>
     *
     * @return \obiba\mica\StudyDto[]
     */
    public function getStudiesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <studies>
     *
     * @param \obiba\mica\StudyDto $value
     * @return \obiba\mica\StudyResultDto
     */
    public function addStudies(\obiba\mica\StudyDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetVariableResultDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\DatasetVariableResolverDto[]  */
    public $summaries = array();
    
    /**  @var \obiba\mica\DatasetVariableDto[]  */
    public $variables = array();
    
    /**  @var \obiba\mica\DatasetDto[]  */
    public $datasets = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetVariableResultDto');

      // REPEATED MESSAGE summaries = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "summaries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetVariableResolverDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE variables = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "variables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetVariableDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE datasets = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "datasets";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <summaries> has a value
     *
     * @return boolean
     */
    public function hasSummaries(){
      return $this->_has(1);
    }
    
    /**
     * Clear <summaries> value
     *
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function clearSummaries(){
      return $this->_clear(1);
    }
    
    /**
     * Get <summaries> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function getSummaries($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <summaries> value
     *
     * @param \obiba\mica\DatasetVariableResolverDto $value
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function setSummaries(\obiba\mica\DatasetVariableResolverDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <summaries>
     *
     * @return \obiba\mica\DatasetVariableResolverDto[]
     */
    public function getSummariesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <summaries>
     *
     * @param \obiba\mica\DatasetVariableResolverDto $value
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function addSummaries(\obiba\mica\DatasetVariableResolverDto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <variables> has a value
     *
     * @return boolean
     */
    public function hasVariables(){
      return $this->_has(2);
    }
    
    /**
     * Clear <variables> value
     *
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function clearVariables(){
      return $this->_clear(2);
    }
    
    /**
     * Get <variables> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetVariableDto
     */
    public function getVariables($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <variables> value
     *
     * @param \obiba\mica\DatasetVariableDto $value
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function setVariables(\obiba\mica\DatasetVariableDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <variables>
     *
     * @return \obiba\mica\DatasetVariableDto[]
     */
    public function getVariablesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <variables>
     *
     * @param \obiba\mica\DatasetVariableDto $value
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function addVariables(\obiba\mica\DatasetVariableDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <datasets> has a value
     *
     * @return boolean
     */
    public function hasDatasets(){
      return $this->_has(3);
    }
    
    /**
     * Clear <datasets> value
     *
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function clearDatasets(){
      return $this->_clear(3);
    }
    
    /**
     * Get <datasets> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetDto
     */
    public function getDatasets($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <datasets> value
     *
     * @param \obiba\mica\DatasetDto $value
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function setDatasets(\obiba\mica\DatasetDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <datasets>
     *
     * @return \obiba\mica\DatasetDto[]
     */
    public function getDatasetsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <datasets>
     *
     * @param \obiba\mica\DatasetDto $value
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function addDatasets(\obiba\mica\DatasetDto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetsResultDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\DatasetDto[]  */
    public $datasets = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetsResultDto');

      // REPEATED MESSAGE datasets = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "datasets";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <datasets> has a value
     *
     * @return boolean
     */
    public function hasDatasets(){
      return $this->_has(1);
    }
    
    /**
     * Clear <datasets> value
     *
     * @return \obiba\mica\DatasetsResultDto
     */
    public function clearDatasets(){
      return $this->_clear(1);
    }
    
    /**
     * Get <datasets> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetDto
     */
    public function getDatasets($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <datasets> value
     *
     * @param \obiba\mica\DatasetDto $value
     * @return \obiba\mica\DatasetsResultDto
     */
    public function setDatasets(\obiba\mica\DatasetDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <datasets>
     *
     * @return \obiba\mica\DatasetDto[]
     */
    public function getDatasetsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <datasets>
     *
     * @param \obiba\mica\DatasetDto $value
     * @return \obiba\mica\DatasetsResultDto
     */
    public function addDatasets(\obiba\mica\DatasetDto $value){
     return $this->_add(1, $value);
    }
  }
}

namespace obiba\mica {

  class StudySummariesResultDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\StudySummaryDto[]  */
    public $summaries = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudySummariesResultDto');

      // REPEATED MESSAGE summaries = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "summaries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\StudySummaryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <summaries> has a value
     *
     * @return boolean
     */
    public function hasSummaries(){
      return $this->_has(1);
    }
    
    /**
     * Clear <summaries> value
     *
     * @return \obiba\mica\StudySummariesResultDto
     */
    public function clearSummaries(){
      return $this->_clear(1);
    }
    
    /**
     * Get <summaries> value
     *
     * @param int $idx
     * @return \obiba\mica\StudySummaryDto
     */
    public function getSummaries($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <summaries> value
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\StudySummariesResultDto
     */
    public function setSummaries(\obiba\mica\StudySummaryDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <summaries>
     *
     * @return \obiba\mica\StudySummaryDto[]
     */
    public function getSummariesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <summaries>
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\StudySummariesResultDto
     */
    public function addSummaries(\obiba\mica\StudySummaryDto $value){
     return $this->_add(1, $value);
    }
  }
}

namespace obiba\mica {

  class AggregationResultDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $aggregation = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.AggregationResultDto');

      // REQUIRED STRING aggregation = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "aggregation";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <aggregation> has a value
     *
     * @return boolean
     */
    public function hasAggregation(){
      return $this->_has(1);
    }
    
    /**
     * Clear <aggregation> value
     *
     * @return \obiba\mica\AggregationResultDto
     */
    public function clearAggregation(){
      return $this->_clear(1);
    }
    
    /**
     * Get <aggregation> value
     *
     * @return string
     */
    public function getAggregation(){
      return $this->_get(1);
    }
    
    /**
     * Set <aggregation> value
     *
     * @param string $value
     * @return \obiba\mica\AggregationResultDto
     */
    public function setAggregation( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace obiba\mica {

  class TermsAggregationResultDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var int */
    public $count = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TermsAggregationResultDto');

      // REQUIRED STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \obiba\mica\TermsAggregationResultDto
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \obiba\mica\TermsAggregationResultDto
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <count> value
     *
     * @return \obiba\mica\TermsAggregationResultDto
     */
    public function clearCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \obiba\mica\TermsAggregationResultDto
     */
    public function setCount( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class StatsAggregationResultDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $count = null;
    
    /**  @var float */
    public $min = null;
    
    /**  @var float */
    public $max = null;
    
    /**  @var float */
    public $avg = null;
    
    /**  @var float */
    public $sum = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StatsAggregationResultDto');

      // REQUIRED INT64 count = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE min = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "min";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE max = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "max";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE avg = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "avg";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE sum = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "sum";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(1);
    }
    
    /**
     * Clear <count> value
     *
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function clearCount(){
      return $this->_clear(1);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(1);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function setCount( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <min> has a value
     *
     * @return boolean
     */
    public function hasMin(){
      return $this->_has(2);
    }
    
    /**
     * Clear <min> value
     *
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function clearMin(){
      return $this->_clear(2);
    }
    
    /**
     * Get <min> value
     *
     * @return float
     */
    public function getMin(){
      return $this->_get(2);
    }
    
    /**
     * Set <min> value
     *
     * @param float $value
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function setMin( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <max> has a value
     *
     * @return boolean
     */
    public function hasMax(){
      return $this->_has(3);
    }
    
    /**
     * Clear <max> value
     *
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function clearMax(){
      return $this->_clear(3);
    }
    
    /**
     * Get <max> value
     *
     * @return float
     */
    public function getMax(){
      return $this->_get(3);
    }
    
    /**
     * Set <max> value
     *
     * @param float $value
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function setMax( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <avg> has a value
     *
     * @return boolean
     */
    public function hasAvg(){
      return $this->_has(4);
    }
    
    /**
     * Clear <avg> value
     *
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function clearAvg(){
      return $this->_clear(4);
    }
    
    /**
     * Get <avg> value
     *
     * @return float
     */
    public function getAvg(){
      return $this->_get(4);
    }
    
    /**
     * Set <avg> value
     *
     * @param float $value
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function setAvg( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <sum> has a value
     *
     * @return boolean
     */
    public function hasSum(){
      return $this->_has(5);
    }
    
    /**
     * Clear <sum> value
     *
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function clearSum(){
      return $this->_clear(5);
    }
    
    /**
     * Get <sum> value
     *
     * @return float
     */
    public function getSum(){
      return $this->_get(5);
    }
    
    /**
     * Set <sum> value
     *
     * @param float $value
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function setSum( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace {
  \obiba\mica\FilterQueryDto::extension(function(){
      // OPTIONAL MESSAGE obiba.mica.TermsFilterQueryDto.terms = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1000;
    $f->name      = "obiba.mica.TermsFilterQueryDto.terms";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\TermsFilterQueryDto';
    return $f;
  });
  \obiba\mica\FilterQueryDto::extension(function(){
      // OPTIONAL MESSAGE obiba.mica.RangeFilterQueryDto.range = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1001;
    $f->name      = "obiba.mica.RangeFilterQueryDto.range";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\RangeFilterQueryDto';
    return $f;
  });
  \obiba\mica\QueryResultDto::extension(function(){
      // OPTIONAL MESSAGE obiba.mica.StudyResultDto.result = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1000;
    $f->name      = "obiba.mica.StudyResultDto.result";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\StudyResultDto';
    return $f;
  });
  \obiba\mica\QueryResultDto::extension(function(){
      // OPTIONAL MESSAGE obiba.mica.DatasetVariableResultDto.result = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1001;
    $f->name      = "obiba.mica.DatasetVariableResultDto.result";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\DatasetVariableResultDto';
    return $f;
  });
  \obiba\mica\QueryResultDto::extension(function(){
      // OPTIONAL MESSAGE obiba.mica.DatasetsResultDto.result = 1002
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1002;
    $f->name      = "obiba.mica.DatasetsResultDto.result";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\DatasetsResultDto';
    return $f;
  });
  \obiba\mica\QueryResultDto::extension(function(){
      // OPTIONAL MESSAGE obiba.mica.StudySummariesResultDto.result = 1003
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1003;
    $f->name      = "obiba.mica.StudySummariesResultDto.result";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\StudySummariesResultDto';
    return $f;
  });
  \obiba\mica\AggregationResultDto::extension(function(){
      // REPEATED MESSAGE obiba.mica.TermsAggregationResultDto.terms = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1000;
    $f->name      = "obiba.mica.TermsAggregationResultDto.terms";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
    $f->reference = '\obiba\mica\TermsAggregationResultDto';
    return $f;
  });
  \obiba\mica\AggregationResultDto::extension(function(){
      // OPTIONAL MESSAGE obiba.mica.StatsAggregationResultDto.stats = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1001;
    $f->name      = "obiba.mica.StatsAggregationResultDto.stats";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\StatsAggregationResultDto';
    return $f;
  });
}