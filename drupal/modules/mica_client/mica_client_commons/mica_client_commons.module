<?php

/**
 * Converts a string to a slug, for use in URLs or CSS classes. This function properly replaces
 *  letters with accents with their non-accented counterparts.
 *
 * @param string The string to convert.
 * @return string The slug.
 */
$path_module_protobuf = drupal_get_path('module', 'obiba_protobuf');
$path_module_protos = drupal_get_path('module', 'mica_client_model');

include_once($path_module_protobuf . '/protobuf/Protobuf.php');
use \DrSlump\Protobuf;

Protobuf::autoload();

const HEADER_BINARY = 'application/x-protobuf';
const HEADER_JSON = 'application/json';
include_once($path_module_protos . '/protos/Mica.php');


function mica_client_commons_to_slug($string) {
  $string = str_replace(array('/', ' '), '-', $string);
  $accents = '/&([A-Za-z]{1,2})(tilde|grave|acute|circ|cedil|uml|lig);/';
  return urlencode(strtolower(preg_replace($accents, '$1', htmlentities(utf8_decode($string)))));
}

/**
 * @param $std The object with localized fields
 * @param $field The localized field
 * @param $lang
 * @return the localized value for this field, with this priority order: $lang, $language->language, 'en' or the first other locale found
 */
function mica_client_commons_get_localized_field($std, $field, $lang = NULL) {
  global $language;
  if (empty($lang)) {
    $lang = $language->language;
  }
  //  $lang='fr';//dpm($std);
  $value = NULL;
  if (!empty($std->{$field})) {
    foreach ($std->{$field} as $field_value) {
      if (!empty($lang) && $lang == $field_value->lang) {
        return $field_value->value;
      }
      elseif ($field_value->lang == 'en') {
        $value = $field_value->value;
      }
      else {
        $value = $field_value->value;
      }
    }
  }
  elseif (is_array($std) && !empty($std[$field])) {
    foreach ($std[$field] as $field_value) {
      if (!empty($lang) && $lang == $field_value['lang']) {
        return $field_value['value'];
      }
      elseif ($field_value['lang'] == 'en') {
        $value = $field_value['value'];
      }
      else {
        $value = $field_value['value'];
      }
    }
  }
  return $value;
}

/**
 * @param $std The object with localized fields
 * @param $field The localized field
 * @param $lang
 * @return the localized value for this field, with this priority order: $lang, $language->language, 'en' or the first other locale found
 */

function mica_client_commons_get_localized_dtos_field($std, $field, $lang = NULL) {
  $value = array();
  foreach ($std->{$field} as $items) {
    $value[] = mica_client_commons_get_localized_field($items, 'localizedStrings');
  }
  return $value;
}

/**
 * @param $limit
 *
 * @return text 'no limit' fin $limit is Null
 */
function mica_client_commons_get_if_no_limit($limit) {
  if (!empty($limit)) {
    return t('No limit');
  }
}

/*
 * @param $iso_country
 * @return CamalCase Country name
 * */
function mica_client_commons_iterate_field($fields, $callback = NULL, $parameters = NULL, $method = NULL) {
  $i = 0;
  $total_item = count($fields);
  foreach ($fields as $field) {
    if (!empty($callback)) {
      if (empty($parameters)) {
        print   call_user_func($callback, $field);
      }
      elseif (empty($method)) {
        print   call_user_func_array($callback, array($field, $parameters));
      }
      else {
        try {
          print   call_user_func_array($callback, array($field, $parameters))->{$method};
        } catch (Exception $e) {
          dpm($e->getMessage());
          dpm($callback);
          dpm($field);
          dpm($parameters);
          dpm($method);
        }
      }

    }
    else {
      print $field;
    }
    if ($i + 1 < $total_item) {
      print ', ';
    }
    $i++;
  }

}

function _mica_client_commons_normalize_rows(&$dce_rows) {
  foreach ($dce_rows as &$dce_row) {
    $dce_row['data']['start'] = mica_client_commons_format_year($dce_row['data']['start_year'], $dce_row['data']['start_month']);
    $dce_row['data']['end'] = mica_client_commons_format_year($dce_row['data']['end_year'], $dce_row['data']['end_month']);
    unset($dce_row['data']['start_year']);
    unset($dce_row['data']['start_month']);
    unset($dce_row['data']['end_year']);
    unset($dce_row['data']['end_month']);
    unset($dce_row['data']['created']);
  }
}


function mica_client_commons_get_month_name($month) {
  global $language;
  return format_date(mktime(0, 0, 0, $month, 1, 2013), 'custom', 'F', NULL, $language->language);
}

function mica_client_commons_convert_to_month($year, $month) {
  return $year * 12 + $month;
}

function mica_client_commons_format_year($year, $month) {
  if (empty($year)) {
    return '';
  }
  return empty($month) ? "$year" : "$year (" . mica_client_commons_get_month_name($month) . ")";
}

function mica_client_commons_add_page($title, $body_html, $alias = NULL, $format = 'full_html') {

  $page_wrapper = entity_property_values_create_entity(
    'node',
    array(
      'type' => 'page',
      'title' => $title,
      'title_field' => $title,
      'body' => array(
        'value' => $body_html,
        'format' => $format,
      ),
      'language' => LANGUAGE_NONE,
      'comment' => COMMENT_NODE_CLOSED,
    )
  )->save();

  if (isset($alias)) {
    $path = array('alias' => $alias);
    $path['source'] = 'node/' . $page_wrapper->getIdentifier();
    $path['language'] = LANGUAGE_NONE;
    path_save($path);
  }

  return $page_wrapper->value();
}

/**
 * Check if current theme is based on Twitter Bootstrap
 */
function mica_client_commons_is_bootstrap_based_theme() {
  // cannot use module_invoke_all() because hook are invoked only for modules
  $current_theme = mica_client_commons_get_current_theme();
  $function = $current_theme . '_bootstrap_based_theme';
  if (function_exists($function)) {
    $result = call_user_func_array($function, array());
    return !empty($result) && is_array($result) && isset($result[$current_theme]) ? $result[$current_theme] : FALSE;
  }
  return FALSE;
}

function mica_client_commons_get_current_theme() {
  global $custom_theme, $theme, $user;

  if (!empty($user->theme)) {
    return $user->theme;
  }
  if (!empty($custom_theme)) {
    return $custom_theme;
  }
  return $theme ? $theme : 'micado_bootstrap';
}

function mica_client_commons_create_search_form($context) {
  global $language;
  $sort_name = 'name.' . $language->language;
  $sort_acronym = 'acronym.' . $language->language;

  $form = array();
  $form['#id'] = 'mica-client-search-form';
  $form['#method'] = 'get';
  $form['#prefix'] = '<div class="inline-form">';
  $form['#suffix'] = '</div>';
  $form['search-sort'] = array(
    '#type' => 'select',
    '#title' => '',
    '#description' => t('Sort by'),
    '#options' => array_merge(array($sort_name => t('Name'), $sort_acronym => t('Acronym')), $context['options']),
    '#default_value' => !empty($_GET['search-sort']) ? $_GET['search-sort'] : NULL,
    '#prefix' => '<div class="right-indent lg-width">',
    '#suffix' => '</div>',
  );

  $form['search-sort-order'] = array(
    '#type' => 'select',
    '#title' => '',
    '#description' => 'Sort order',
    '#options' => array(
      'asc' => t('ASC'),
      'desc' => t('DESC'),
    ),
    '#default_value' => !empty($_GET['search-sort-order']) ? $_GET['search-sort-order'] : NULL,
    '#prefix' => '<div class="right-indent md-width">',
    '#suffix' => '</div>',

  );


  $form['search-query'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#description' => 'Filter by',
    '#default_value' => !empty($_GET['search-query']) ? $_GET['search-query'] : NULL,
    '#prefix' => '<div class="right-indent lg-width">',
    '#suffix' => '</div>',
  );

  return $form;
}

function mica_client_commons_safe_expose_server_url($entity_id, $file_resource, $entity_type) {
  if (!empty($file_resource)) {
    $micaUrl = (isset($mica_url) ? $mica_url : variable_get_value('mica_url')) . '/ws';
    $url = $micaUrl . "/" . $entity_type . "/" . $entity_id . "/file/"
      . $file_resource->id . "/_download";
    $resource_data = drupal_http_request($url);
    $response_code = floor($resource_data->code / 100) * 100;
    if ($response_code != 400 && $response_code != 500 && !empty($resource_data)) {
      $extension_file = _mica_client_commons_get_extention_file($file_resource);
      $file = file_unmanaged_save_data($resource_data->data, 'public://tmp' . $file_resource->id . '.' . $extension_file, FILE_EXISTS_REPLACE);
      $exposed_url = file_create_url($file);
      return $exposed_url;
    }
  }
  return NULL;
}

function _mica_client_commons_get_extention_file($file_resource) {
  $file_array = explode('.', $file_resource->fileName);
  $extension_file = count($file_array);

  return $file_array[$extension_file - 1];
}