<?php

function obiba_mica_utils_block_info() {
  return _obiba_mica_utils_footer_block();
}

function obiba_mica_utils_block_view($delta = '') {
  $block = array();
  if ('footerLastUpdated' === $delta) {
    $lastUpdatedCaption = variable_get_value('footerLastUpdatedCaption') ?: t('Last updated:');
    $updateDate = obiba_mica_utils_current_last_updated($lastUpdatedCaption) ?:
      obiba_mica_utils_nodes_last_updated($lastUpdatedCaption);
    $block['content'] = $updateDate;
  }

  return $block;
}

function obiba_mica_utils_nodes_last_updated($prefix = NULL) {
  return (new NodeUpdateDate($prefix))->getNodesLastUpdated();
}

function obiba_mica_utils_current_last_updated($prefix = NULL) {
  return (new NodeUpdateDate($prefix))->getCurrentLastUpdated();
}

function _obiba_mica_utils_footer_block() {
  return array(
    'footerLastUpdated' => array(
      'info' => t('Footer last updated information'),
      'region' => 'footer',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'weight' => '-15',
    )
  );
}

/**
 * Helper class used to get node last update date
 */
class NodeUpdateDate {
  const DATE_FORMAT = 'Y/m/d';
  
  public function __construct($prefix) {
    $this->prefix = empty($prefix) ? "" : $prefix . " ";
  }
  
  public function getCurrentLastUpdated() {
    if ("node" === arg(0)) {
      $node = node_load(arg(1));

      if (!empty($node) && !empty($node->changed)) {
        return $this->prefix . $this->format($node->changed);
      }
    }

    return "";
  }
  
  public function getNodesLastUpdated() {
    // get date of most most recent change to a node
    $result = db_query('SELECT FROM_UNIXTIME(MAX(changed)) FROM {node}');

    if (!empty($result)) {
      // could not use db_result(), a little more code for less dependency!
      $record = get_object_vars($result->fetch());
      if (!empty($record)) {
        return $this->prefix . $this->formatFromString(array_pop($record));
      }
    }

    return "";
  }

  private function format($date) {
    return date(self::DATE_FORMAT, $date);
  }

  private function formatFromString($date) {
    return $this->format(strtotime($date));
  }
}
